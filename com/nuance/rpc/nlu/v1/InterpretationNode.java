// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: multi-intent-interpretation.proto

package com.nuance.rpc.nlu.v1;

/**
 * <pre>
 **
 * Node in the interpretation tree. Included in
 * [MultiIntentInterpretation](#multiintentinterpretation).
 * </pre>
 *
 * Protobuf type {@code nuance.nlu.v1.InterpretationNode}
 */
public  final class InterpretationNode extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:nuance.nlu.v1.InterpretationNode)
    InterpretationNodeOrBuilder {
private static final long serialVersionUID = 0L;
  // Use InterpretationNode.newBuilder() to construct.
  private InterpretationNode(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private InterpretationNode() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new InterpretationNode();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private InterpretationNode(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            com.nuance.rpc.nlu.v1.OperatorNode.Builder subBuilder = null;
            if (interpretationNodeUnionCase_ == 1) {
              subBuilder = ((com.nuance.rpc.nlu.v1.OperatorNode) interpretationNodeUnion_).toBuilder();
            }
            interpretationNodeUnion_ =
                input.readMessage(com.nuance.rpc.nlu.v1.OperatorNode.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.nuance.rpc.nlu.v1.OperatorNode) interpretationNodeUnion_);
              interpretationNodeUnion_ = subBuilder.buildPartial();
            }
            interpretationNodeUnionCase_ = 1;
            break;
          }
          case 18: {
            com.nuance.rpc.nlu.v1.IntentNode.Builder subBuilder = null;
            if (interpretationNodeUnionCase_ == 2) {
              subBuilder = ((com.nuance.rpc.nlu.v1.IntentNode) interpretationNodeUnion_).toBuilder();
            }
            interpretationNodeUnion_ =
                input.readMessage(com.nuance.rpc.nlu.v1.IntentNode.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.nuance.rpc.nlu.v1.IntentNode) interpretationNodeUnion_);
              interpretationNodeUnion_ = subBuilder.buildPartial();
            }
            interpretationNodeUnionCase_ = 2;
            break;
          }
          case 26: {
            com.nuance.rpc.nlu.v1.EntityNode.Builder subBuilder = null;
            if (interpretationNodeUnionCase_ == 3) {
              subBuilder = ((com.nuance.rpc.nlu.v1.EntityNode) interpretationNodeUnion_).toBuilder();
            }
            interpretationNodeUnion_ =
                input.readMessage(com.nuance.rpc.nlu.v1.EntityNode.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.nuance.rpc.nlu.v1.EntityNode) interpretationNodeUnion_);
              interpretationNodeUnion_ = subBuilder.buildPartial();
            }
            interpretationNodeUnionCase_ = 3;
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.nuance.rpc.nlu.v1.MultiIntentInterpretationProto.internal_static_nuance_nlu_v1_InterpretationNode_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.nuance.rpc.nlu.v1.MultiIntentInterpretationProto.internal_static_nuance_nlu_v1_InterpretationNode_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.nuance.rpc.nlu.v1.InterpretationNode.class, com.nuance.rpc.nlu.v1.InterpretationNode.Builder.class);
  }

  private int interpretationNodeUnionCase_ = 0;
  private java.lang.Object interpretationNodeUnion_;
  public enum InterpretationNodeUnionCase
      implements com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    OPERATOR(1),
    INTENT(2),
    ENTITY(3),
    INTERPRETATIONNODEUNION_NOT_SET(0);
    private final int value;
    private InterpretationNodeUnionCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static InterpretationNodeUnionCase valueOf(int value) {
      return forNumber(value);
    }

    public static InterpretationNodeUnionCase forNumber(int value) {
      switch (value) {
        case 1: return OPERATOR;
        case 2: return INTENT;
        case 3: return ENTITY;
        case 0: return INTERPRETATIONNODEUNION_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public InterpretationNodeUnionCase
  getInterpretationNodeUnionCase() {
    return InterpretationNodeUnionCase.forNumber(
        interpretationNodeUnionCase_);
  }

  public static final int OPERATOR_FIELD_NUMBER = 1;
  /**
   * <pre>
   * The relationship of the intents or entities.
   * </pre>
   *
   * <code>.nuance.nlu.v1.OperatorNode operator = 1;</code>
   * @return Whether the operator field is set.
   */
  public boolean hasOperator() {
    return interpretationNodeUnionCase_ == 1;
  }
  /**
   * <pre>
   * The relationship of the intents or entities.
   * </pre>
   *
   * <code>.nuance.nlu.v1.OperatorNode operator = 1;</code>
   * @return The operator.
   */
  public com.nuance.rpc.nlu.v1.OperatorNode getOperator() {
    if (interpretationNodeUnionCase_ == 1) {
       return (com.nuance.rpc.nlu.v1.OperatorNode) interpretationNodeUnion_;
    }
    return com.nuance.rpc.nlu.v1.OperatorNode.getDefaultInstance();
  }
  /**
   * <pre>
   * The relationship of the intents or entities.
   * </pre>
   *
   * <code>.nuance.nlu.v1.OperatorNode operator = 1;</code>
   */
  public com.nuance.rpc.nlu.v1.OperatorNodeOrBuilder getOperatorOrBuilder() {
    if (interpretationNodeUnionCase_ == 1) {
       return (com.nuance.rpc.nlu.v1.OperatorNode) interpretationNodeUnion_;
    }
    return com.nuance.rpc.nlu.v1.OperatorNode.getDefaultInstance();
  }

  public static final int INTENT_FIELD_NUMBER = 2;
  /**
   * <pre>
   * The intents detected in the user input.
   * </pre>
   *
   * <code>.nuance.nlu.v1.IntentNode intent = 2;</code>
   * @return Whether the intent field is set.
   */
  public boolean hasIntent() {
    return interpretationNodeUnionCase_ == 2;
  }
  /**
   * <pre>
   * The intents detected in the user input.
   * </pre>
   *
   * <code>.nuance.nlu.v1.IntentNode intent = 2;</code>
   * @return The intent.
   */
  public com.nuance.rpc.nlu.v1.IntentNode getIntent() {
    if (interpretationNodeUnionCase_ == 2) {
       return (com.nuance.rpc.nlu.v1.IntentNode) interpretationNodeUnion_;
    }
    return com.nuance.rpc.nlu.v1.IntentNode.getDefaultInstance();
  }
  /**
   * <pre>
   * The intents detected in the user input.
   * </pre>
   *
   * <code>.nuance.nlu.v1.IntentNode intent = 2;</code>
   */
  public com.nuance.rpc.nlu.v1.IntentNodeOrBuilder getIntentOrBuilder() {
    if (interpretationNodeUnionCase_ == 2) {
       return (com.nuance.rpc.nlu.v1.IntentNode) interpretationNodeUnion_;
    }
    return com.nuance.rpc.nlu.v1.IntentNode.getDefaultInstance();
  }

  public static final int ENTITY_FIELD_NUMBER = 3;
  /**
   * <pre>
   * The entities in the intent.  
   * </pre>
   *
   * <code>.nuance.nlu.v1.EntityNode entity = 3;</code>
   * @return Whether the entity field is set.
   */
  public boolean hasEntity() {
    return interpretationNodeUnionCase_ == 3;
  }
  /**
   * <pre>
   * The entities in the intent.  
   * </pre>
   *
   * <code>.nuance.nlu.v1.EntityNode entity = 3;</code>
   * @return The entity.
   */
  public com.nuance.rpc.nlu.v1.EntityNode getEntity() {
    if (interpretationNodeUnionCase_ == 3) {
       return (com.nuance.rpc.nlu.v1.EntityNode) interpretationNodeUnion_;
    }
    return com.nuance.rpc.nlu.v1.EntityNode.getDefaultInstance();
  }
  /**
   * <pre>
   * The entities in the intent.  
   * </pre>
   *
   * <code>.nuance.nlu.v1.EntityNode entity = 3;</code>
   */
  public com.nuance.rpc.nlu.v1.EntityNodeOrBuilder getEntityOrBuilder() {
    if (interpretationNodeUnionCase_ == 3) {
       return (com.nuance.rpc.nlu.v1.EntityNode) interpretationNodeUnion_;
    }
    return com.nuance.rpc.nlu.v1.EntityNode.getDefaultInstance();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (interpretationNodeUnionCase_ == 1) {
      output.writeMessage(1, (com.nuance.rpc.nlu.v1.OperatorNode) interpretationNodeUnion_);
    }
    if (interpretationNodeUnionCase_ == 2) {
      output.writeMessage(2, (com.nuance.rpc.nlu.v1.IntentNode) interpretationNodeUnion_);
    }
    if (interpretationNodeUnionCase_ == 3) {
      output.writeMessage(3, (com.nuance.rpc.nlu.v1.EntityNode) interpretationNodeUnion_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (interpretationNodeUnionCase_ == 1) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, (com.nuance.rpc.nlu.v1.OperatorNode) interpretationNodeUnion_);
    }
    if (interpretationNodeUnionCase_ == 2) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, (com.nuance.rpc.nlu.v1.IntentNode) interpretationNodeUnion_);
    }
    if (interpretationNodeUnionCase_ == 3) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, (com.nuance.rpc.nlu.v1.EntityNode) interpretationNodeUnion_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.nuance.rpc.nlu.v1.InterpretationNode)) {
      return super.equals(obj);
    }
    com.nuance.rpc.nlu.v1.InterpretationNode other = (com.nuance.rpc.nlu.v1.InterpretationNode) obj;

    if (!getInterpretationNodeUnionCase().equals(other.getInterpretationNodeUnionCase())) return false;
    switch (interpretationNodeUnionCase_) {
      case 1:
        if (!getOperator()
            .equals(other.getOperator())) return false;
        break;
      case 2:
        if (!getIntent()
            .equals(other.getIntent())) return false;
        break;
      case 3:
        if (!getEntity()
            .equals(other.getEntity())) return false;
        break;
      case 0:
      default:
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    switch (interpretationNodeUnionCase_) {
      case 1:
        hash = (37 * hash) + OPERATOR_FIELD_NUMBER;
        hash = (53 * hash) + getOperator().hashCode();
        break;
      case 2:
        hash = (37 * hash) + INTENT_FIELD_NUMBER;
        hash = (53 * hash) + getIntent().hashCode();
        break;
      case 3:
        hash = (37 * hash) + ENTITY_FIELD_NUMBER;
        hash = (53 * hash) + getEntity().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.nuance.rpc.nlu.v1.InterpretationNode parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.nuance.rpc.nlu.v1.InterpretationNode parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.nuance.rpc.nlu.v1.InterpretationNode parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.nuance.rpc.nlu.v1.InterpretationNode parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.nuance.rpc.nlu.v1.InterpretationNode parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.nuance.rpc.nlu.v1.InterpretationNode parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.nuance.rpc.nlu.v1.InterpretationNode parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.nuance.rpc.nlu.v1.InterpretationNode parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.nuance.rpc.nlu.v1.InterpretationNode parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.nuance.rpc.nlu.v1.InterpretationNode parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.nuance.rpc.nlu.v1.InterpretationNode parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.nuance.rpc.nlu.v1.InterpretationNode parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.nuance.rpc.nlu.v1.InterpretationNode prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   **
   * Node in the interpretation tree. Included in
   * [MultiIntentInterpretation](#multiintentinterpretation).
   * </pre>
   *
   * Protobuf type {@code nuance.nlu.v1.InterpretationNode}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:nuance.nlu.v1.InterpretationNode)
      com.nuance.rpc.nlu.v1.InterpretationNodeOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.nuance.rpc.nlu.v1.MultiIntentInterpretationProto.internal_static_nuance_nlu_v1_InterpretationNode_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.nuance.rpc.nlu.v1.MultiIntentInterpretationProto.internal_static_nuance_nlu_v1_InterpretationNode_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.nuance.rpc.nlu.v1.InterpretationNode.class, com.nuance.rpc.nlu.v1.InterpretationNode.Builder.class);
    }

    // Construct using com.nuance.rpc.nlu.v1.InterpretationNode.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      interpretationNodeUnionCase_ = 0;
      interpretationNodeUnion_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.nuance.rpc.nlu.v1.MultiIntentInterpretationProto.internal_static_nuance_nlu_v1_InterpretationNode_descriptor;
    }

    @java.lang.Override
    public com.nuance.rpc.nlu.v1.InterpretationNode getDefaultInstanceForType() {
      return com.nuance.rpc.nlu.v1.InterpretationNode.getDefaultInstance();
    }

    @java.lang.Override
    public com.nuance.rpc.nlu.v1.InterpretationNode build() {
      com.nuance.rpc.nlu.v1.InterpretationNode result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.nuance.rpc.nlu.v1.InterpretationNode buildPartial() {
      com.nuance.rpc.nlu.v1.InterpretationNode result = new com.nuance.rpc.nlu.v1.InterpretationNode(this);
      if (interpretationNodeUnionCase_ == 1) {
        if (operatorBuilder_ == null) {
          result.interpretationNodeUnion_ = interpretationNodeUnion_;
        } else {
          result.interpretationNodeUnion_ = operatorBuilder_.build();
        }
      }
      if (interpretationNodeUnionCase_ == 2) {
        if (intentBuilder_ == null) {
          result.interpretationNodeUnion_ = interpretationNodeUnion_;
        } else {
          result.interpretationNodeUnion_ = intentBuilder_.build();
        }
      }
      if (interpretationNodeUnionCase_ == 3) {
        if (entityBuilder_ == null) {
          result.interpretationNodeUnion_ = interpretationNodeUnion_;
        } else {
          result.interpretationNodeUnion_ = entityBuilder_.build();
        }
      }
      result.interpretationNodeUnionCase_ = interpretationNodeUnionCase_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.nuance.rpc.nlu.v1.InterpretationNode) {
        return mergeFrom((com.nuance.rpc.nlu.v1.InterpretationNode)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.nuance.rpc.nlu.v1.InterpretationNode other) {
      if (other == com.nuance.rpc.nlu.v1.InterpretationNode.getDefaultInstance()) return this;
      switch (other.getInterpretationNodeUnionCase()) {
        case OPERATOR: {
          mergeOperator(other.getOperator());
          break;
        }
        case INTENT: {
          mergeIntent(other.getIntent());
          break;
        }
        case ENTITY: {
          mergeEntity(other.getEntity());
          break;
        }
        case INTERPRETATIONNODEUNION_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.nuance.rpc.nlu.v1.InterpretationNode parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.nuance.rpc.nlu.v1.InterpretationNode) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int interpretationNodeUnionCase_ = 0;
    private java.lang.Object interpretationNodeUnion_;
    public InterpretationNodeUnionCase
        getInterpretationNodeUnionCase() {
      return InterpretationNodeUnionCase.forNumber(
          interpretationNodeUnionCase_);
    }

    public Builder clearInterpretationNodeUnion() {
      interpretationNodeUnionCase_ = 0;
      interpretationNodeUnion_ = null;
      onChanged();
      return this;
    }


    private com.google.protobuf.SingleFieldBuilderV3<
        com.nuance.rpc.nlu.v1.OperatorNode, com.nuance.rpc.nlu.v1.OperatorNode.Builder, com.nuance.rpc.nlu.v1.OperatorNodeOrBuilder> operatorBuilder_;
    /**
     * <pre>
     * The relationship of the intents or entities.
     * </pre>
     *
     * <code>.nuance.nlu.v1.OperatorNode operator = 1;</code>
     * @return Whether the operator field is set.
     */
    public boolean hasOperator() {
      return interpretationNodeUnionCase_ == 1;
    }
    /**
     * <pre>
     * The relationship of the intents or entities.
     * </pre>
     *
     * <code>.nuance.nlu.v1.OperatorNode operator = 1;</code>
     * @return The operator.
     */
    public com.nuance.rpc.nlu.v1.OperatorNode getOperator() {
      if (operatorBuilder_ == null) {
        if (interpretationNodeUnionCase_ == 1) {
          return (com.nuance.rpc.nlu.v1.OperatorNode) interpretationNodeUnion_;
        }
        return com.nuance.rpc.nlu.v1.OperatorNode.getDefaultInstance();
      } else {
        if (interpretationNodeUnionCase_ == 1) {
          return operatorBuilder_.getMessage();
        }
        return com.nuance.rpc.nlu.v1.OperatorNode.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * The relationship of the intents or entities.
     * </pre>
     *
     * <code>.nuance.nlu.v1.OperatorNode operator = 1;</code>
     */
    public Builder setOperator(com.nuance.rpc.nlu.v1.OperatorNode value) {
      if (operatorBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        interpretationNodeUnion_ = value;
        onChanged();
      } else {
        operatorBuilder_.setMessage(value);
      }
      interpretationNodeUnionCase_ = 1;
      return this;
    }
    /**
     * <pre>
     * The relationship of the intents or entities.
     * </pre>
     *
     * <code>.nuance.nlu.v1.OperatorNode operator = 1;</code>
     */
    public Builder setOperator(
        com.nuance.rpc.nlu.v1.OperatorNode.Builder builderForValue) {
      if (operatorBuilder_ == null) {
        interpretationNodeUnion_ = builderForValue.build();
        onChanged();
      } else {
        operatorBuilder_.setMessage(builderForValue.build());
      }
      interpretationNodeUnionCase_ = 1;
      return this;
    }
    /**
     * <pre>
     * The relationship of the intents or entities.
     * </pre>
     *
     * <code>.nuance.nlu.v1.OperatorNode operator = 1;</code>
     */
    public Builder mergeOperator(com.nuance.rpc.nlu.v1.OperatorNode value) {
      if (operatorBuilder_ == null) {
        if (interpretationNodeUnionCase_ == 1 &&
            interpretationNodeUnion_ != com.nuance.rpc.nlu.v1.OperatorNode.getDefaultInstance()) {
          interpretationNodeUnion_ = com.nuance.rpc.nlu.v1.OperatorNode.newBuilder((com.nuance.rpc.nlu.v1.OperatorNode) interpretationNodeUnion_)
              .mergeFrom(value).buildPartial();
        } else {
          interpretationNodeUnion_ = value;
        }
        onChanged();
      } else {
        if (interpretationNodeUnionCase_ == 1) {
          operatorBuilder_.mergeFrom(value);
        }
        operatorBuilder_.setMessage(value);
      }
      interpretationNodeUnionCase_ = 1;
      return this;
    }
    /**
     * <pre>
     * The relationship of the intents or entities.
     * </pre>
     *
     * <code>.nuance.nlu.v1.OperatorNode operator = 1;</code>
     */
    public Builder clearOperator() {
      if (operatorBuilder_ == null) {
        if (interpretationNodeUnionCase_ == 1) {
          interpretationNodeUnionCase_ = 0;
          interpretationNodeUnion_ = null;
          onChanged();
        }
      } else {
        if (interpretationNodeUnionCase_ == 1) {
          interpretationNodeUnionCase_ = 0;
          interpretationNodeUnion_ = null;
        }
        operatorBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * The relationship of the intents or entities.
     * </pre>
     *
     * <code>.nuance.nlu.v1.OperatorNode operator = 1;</code>
     */
    public com.nuance.rpc.nlu.v1.OperatorNode.Builder getOperatorBuilder() {
      return getOperatorFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The relationship of the intents or entities.
     * </pre>
     *
     * <code>.nuance.nlu.v1.OperatorNode operator = 1;</code>
     */
    public com.nuance.rpc.nlu.v1.OperatorNodeOrBuilder getOperatorOrBuilder() {
      if ((interpretationNodeUnionCase_ == 1) && (operatorBuilder_ != null)) {
        return operatorBuilder_.getMessageOrBuilder();
      } else {
        if (interpretationNodeUnionCase_ == 1) {
          return (com.nuance.rpc.nlu.v1.OperatorNode) interpretationNodeUnion_;
        }
        return com.nuance.rpc.nlu.v1.OperatorNode.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * The relationship of the intents or entities.
     * </pre>
     *
     * <code>.nuance.nlu.v1.OperatorNode operator = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.nuance.rpc.nlu.v1.OperatorNode, com.nuance.rpc.nlu.v1.OperatorNode.Builder, com.nuance.rpc.nlu.v1.OperatorNodeOrBuilder> 
        getOperatorFieldBuilder() {
      if (operatorBuilder_ == null) {
        if (!(interpretationNodeUnionCase_ == 1)) {
          interpretationNodeUnion_ = com.nuance.rpc.nlu.v1.OperatorNode.getDefaultInstance();
        }
        operatorBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.nuance.rpc.nlu.v1.OperatorNode, com.nuance.rpc.nlu.v1.OperatorNode.Builder, com.nuance.rpc.nlu.v1.OperatorNodeOrBuilder>(
                (com.nuance.rpc.nlu.v1.OperatorNode) interpretationNodeUnion_,
                getParentForChildren(),
                isClean());
        interpretationNodeUnion_ = null;
      }
      interpretationNodeUnionCase_ = 1;
      onChanged();;
      return operatorBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.nuance.rpc.nlu.v1.IntentNode, com.nuance.rpc.nlu.v1.IntentNode.Builder, com.nuance.rpc.nlu.v1.IntentNodeOrBuilder> intentBuilder_;
    /**
     * <pre>
     * The intents detected in the user input.
     * </pre>
     *
     * <code>.nuance.nlu.v1.IntentNode intent = 2;</code>
     * @return Whether the intent field is set.
     */
    public boolean hasIntent() {
      return interpretationNodeUnionCase_ == 2;
    }
    /**
     * <pre>
     * The intents detected in the user input.
     * </pre>
     *
     * <code>.nuance.nlu.v1.IntentNode intent = 2;</code>
     * @return The intent.
     */
    public com.nuance.rpc.nlu.v1.IntentNode getIntent() {
      if (intentBuilder_ == null) {
        if (interpretationNodeUnionCase_ == 2) {
          return (com.nuance.rpc.nlu.v1.IntentNode) interpretationNodeUnion_;
        }
        return com.nuance.rpc.nlu.v1.IntentNode.getDefaultInstance();
      } else {
        if (interpretationNodeUnionCase_ == 2) {
          return intentBuilder_.getMessage();
        }
        return com.nuance.rpc.nlu.v1.IntentNode.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * The intents detected in the user input.
     * </pre>
     *
     * <code>.nuance.nlu.v1.IntentNode intent = 2;</code>
     */
    public Builder setIntent(com.nuance.rpc.nlu.v1.IntentNode value) {
      if (intentBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        interpretationNodeUnion_ = value;
        onChanged();
      } else {
        intentBuilder_.setMessage(value);
      }
      interpretationNodeUnionCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * The intents detected in the user input.
     * </pre>
     *
     * <code>.nuance.nlu.v1.IntentNode intent = 2;</code>
     */
    public Builder setIntent(
        com.nuance.rpc.nlu.v1.IntentNode.Builder builderForValue) {
      if (intentBuilder_ == null) {
        interpretationNodeUnion_ = builderForValue.build();
        onChanged();
      } else {
        intentBuilder_.setMessage(builderForValue.build());
      }
      interpretationNodeUnionCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * The intents detected in the user input.
     * </pre>
     *
     * <code>.nuance.nlu.v1.IntentNode intent = 2;</code>
     */
    public Builder mergeIntent(com.nuance.rpc.nlu.v1.IntentNode value) {
      if (intentBuilder_ == null) {
        if (interpretationNodeUnionCase_ == 2 &&
            interpretationNodeUnion_ != com.nuance.rpc.nlu.v1.IntentNode.getDefaultInstance()) {
          interpretationNodeUnion_ = com.nuance.rpc.nlu.v1.IntentNode.newBuilder((com.nuance.rpc.nlu.v1.IntentNode) interpretationNodeUnion_)
              .mergeFrom(value).buildPartial();
        } else {
          interpretationNodeUnion_ = value;
        }
        onChanged();
      } else {
        if (interpretationNodeUnionCase_ == 2) {
          intentBuilder_.mergeFrom(value);
        }
        intentBuilder_.setMessage(value);
      }
      interpretationNodeUnionCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * The intents detected in the user input.
     * </pre>
     *
     * <code>.nuance.nlu.v1.IntentNode intent = 2;</code>
     */
    public Builder clearIntent() {
      if (intentBuilder_ == null) {
        if (interpretationNodeUnionCase_ == 2) {
          interpretationNodeUnionCase_ = 0;
          interpretationNodeUnion_ = null;
          onChanged();
        }
      } else {
        if (interpretationNodeUnionCase_ == 2) {
          interpretationNodeUnionCase_ = 0;
          interpretationNodeUnion_ = null;
        }
        intentBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * The intents detected in the user input.
     * </pre>
     *
     * <code>.nuance.nlu.v1.IntentNode intent = 2;</code>
     */
    public com.nuance.rpc.nlu.v1.IntentNode.Builder getIntentBuilder() {
      return getIntentFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The intents detected in the user input.
     * </pre>
     *
     * <code>.nuance.nlu.v1.IntentNode intent = 2;</code>
     */
    public com.nuance.rpc.nlu.v1.IntentNodeOrBuilder getIntentOrBuilder() {
      if ((interpretationNodeUnionCase_ == 2) && (intentBuilder_ != null)) {
        return intentBuilder_.getMessageOrBuilder();
      } else {
        if (interpretationNodeUnionCase_ == 2) {
          return (com.nuance.rpc.nlu.v1.IntentNode) interpretationNodeUnion_;
        }
        return com.nuance.rpc.nlu.v1.IntentNode.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * The intents detected in the user input.
     * </pre>
     *
     * <code>.nuance.nlu.v1.IntentNode intent = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.nuance.rpc.nlu.v1.IntentNode, com.nuance.rpc.nlu.v1.IntentNode.Builder, com.nuance.rpc.nlu.v1.IntentNodeOrBuilder> 
        getIntentFieldBuilder() {
      if (intentBuilder_ == null) {
        if (!(interpretationNodeUnionCase_ == 2)) {
          interpretationNodeUnion_ = com.nuance.rpc.nlu.v1.IntentNode.getDefaultInstance();
        }
        intentBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.nuance.rpc.nlu.v1.IntentNode, com.nuance.rpc.nlu.v1.IntentNode.Builder, com.nuance.rpc.nlu.v1.IntentNodeOrBuilder>(
                (com.nuance.rpc.nlu.v1.IntentNode) interpretationNodeUnion_,
                getParentForChildren(),
                isClean());
        interpretationNodeUnion_ = null;
      }
      interpretationNodeUnionCase_ = 2;
      onChanged();;
      return intentBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.nuance.rpc.nlu.v1.EntityNode, com.nuance.rpc.nlu.v1.EntityNode.Builder, com.nuance.rpc.nlu.v1.EntityNodeOrBuilder> entityBuilder_;
    /**
     * <pre>
     * The entities in the intent.  
     * </pre>
     *
     * <code>.nuance.nlu.v1.EntityNode entity = 3;</code>
     * @return Whether the entity field is set.
     */
    public boolean hasEntity() {
      return interpretationNodeUnionCase_ == 3;
    }
    /**
     * <pre>
     * The entities in the intent.  
     * </pre>
     *
     * <code>.nuance.nlu.v1.EntityNode entity = 3;</code>
     * @return The entity.
     */
    public com.nuance.rpc.nlu.v1.EntityNode getEntity() {
      if (entityBuilder_ == null) {
        if (interpretationNodeUnionCase_ == 3) {
          return (com.nuance.rpc.nlu.v1.EntityNode) interpretationNodeUnion_;
        }
        return com.nuance.rpc.nlu.v1.EntityNode.getDefaultInstance();
      } else {
        if (interpretationNodeUnionCase_ == 3) {
          return entityBuilder_.getMessage();
        }
        return com.nuance.rpc.nlu.v1.EntityNode.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * The entities in the intent.  
     * </pre>
     *
     * <code>.nuance.nlu.v1.EntityNode entity = 3;</code>
     */
    public Builder setEntity(com.nuance.rpc.nlu.v1.EntityNode value) {
      if (entityBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        interpretationNodeUnion_ = value;
        onChanged();
      } else {
        entityBuilder_.setMessage(value);
      }
      interpretationNodeUnionCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * The entities in the intent.  
     * </pre>
     *
     * <code>.nuance.nlu.v1.EntityNode entity = 3;</code>
     */
    public Builder setEntity(
        com.nuance.rpc.nlu.v1.EntityNode.Builder builderForValue) {
      if (entityBuilder_ == null) {
        interpretationNodeUnion_ = builderForValue.build();
        onChanged();
      } else {
        entityBuilder_.setMessage(builderForValue.build());
      }
      interpretationNodeUnionCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * The entities in the intent.  
     * </pre>
     *
     * <code>.nuance.nlu.v1.EntityNode entity = 3;</code>
     */
    public Builder mergeEntity(com.nuance.rpc.nlu.v1.EntityNode value) {
      if (entityBuilder_ == null) {
        if (interpretationNodeUnionCase_ == 3 &&
            interpretationNodeUnion_ != com.nuance.rpc.nlu.v1.EntityNode.getDefaultInstance()) {
          interpretationNodeUnion_ = com.nuance.rpc.nlu.v1.EntityNode.newBuilder((com.nuance.rpc.nlu.v1.EntityNode) interpretationNodeUnion_)
              .mergeFrom(value).buildPartial();
        } else {
          interpretationNodeUnion_ = value;
        }
        onChanged();
      } else {
        if (interpretationNodeUnionCase_ == 3) {
          entityBuilder_.mergeFrom(value);
        }
        entityBuilder_.setMessage(value);
      }
      interpretationNodeUnionCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * The entities in the intent.  
     * </pre>
     *
     * <code>.nuance.nlu.v1.EntityNode entity = 3;</code>
     */
    public Builder clearEntity() {
      if (entityBuilder_ == null) {
        if (interpretationNodeUnionCase_ == 3) {
          interpretationNodeUnionCase_ = 0;
          interpretationNodeUnion_ = null;
          onChanged();
        }
      } else {
        if (interpretationNodeUnionCase_ == 3) {
          interpretationNodeUnionCase_ = 0;
          interpretationNodeUnion_ = null;
        }
        entityBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * The entities in the intent.  
     * </pre>
     *
     * <code>.nuance.nlu.v1.EntityNode entity = 3;</code>
     */
    public com.nuance.rpc.nlu.v1.EntityNode.Builder getEntityBuilder() {
      return getEntityFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The entities in the intent.  
     * </pre>
     *
     * <code>.nuance.nlu.v1.EntityNode entity = 3;</code>
     */
    public com.nuance.rpc.nlu.v1.EntityNodeOrBuilder getEntityOrBuilder() {
      if ((interpretationNodeUnionCase_ == 3) && (entityBuilder_ != null)) {
        return entityBuilder_.getMessageOrBuilder();
      } else {
        if (interpretationNodeUnionCase_ == 3) {
          return (com.nuance.rpc.nlu.v1.EntityNode) interpretationNodeUnion_;
        }
        return com.nuance.rpc.nlu.v1.EntityNode.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * The entities in the intent.  
     * </pre>
     *
     * <code>.nuance.nlu.v1.EntityNode entity = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.nuance.rpc.nlu.v1.EntityNode, com.nuance.rpc.nlu.v1.EntityNode.Builder, com.nuance.rpc.nlu.v1.EntityNodeOrBuilder> 
        getEntityFieldBuilder() {
      if (entityBuilder_ == null) {
        if (!(interpretationNodeUnionCase_ == 3)) {
          interpretationNodeUnion_ = com.nuance.rpc.nlu.v1.EntityNode.getDefaultInstance();
        }
        entityBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.nuance.rpc.nlu.v1.EntityNode, com.nuance.rpc.nlu.v1.EntityNode.Builder, com.nuance.rpc.nlu.v1.EntityNodeOrBuilder>(
                (com.nuance.rpc.nlu.v1.EntityNode) interpretationNodeUnion_,
                getParentForChildren(),
                isClean());
        interpretationNodeUnion_ = null;
      }
      interpretationNodeUnionCase_ = 3;
      onChanged();;
      return entityBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:nuance.nlu.v1.InterpretationNode)
  }

  // @@protoc_insertion_point(class_scope:nuance.nlu.v1.InterpretationNode)
  private static final com.nuance.rpc.nlu.v1.InterpretationNode DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.nuance.rpc.nlu.v1.InterpretationNode();
  }

  public static com.nuance.rpc.nlu.v1.InterpretationNode getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<InterpretationNode>
      PARSER = new com.google.protobuf.AbstractParser<InterpretationNode>() {
    @java.lang.Override
    public InterpretationNode parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new InterpretationNode(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<InterpretationNode> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<InterpretationNode> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.nuance.rpc.nlu.v1.InterpretationNode getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

