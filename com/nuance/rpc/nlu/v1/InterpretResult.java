// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: result.proto

package com.nuance.rpc.nlu.v1;

/**
 * <pre>
 **
 * Result of interpretation. Contains the input literal and one or
 * more interpretations. Included in
 * [InterpretResponse](#interpretresponse).
 * </pre>
 *
 * Protobuf type {@code nuance.nlu.v1.InterpretResult}
 */
public  final class InterpretResult extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:nuance.nlu.v1.InterpretResult)
    InterpretResultOrBuilder {
private static final long serialVersionUID = 0L;
  // Use InterpretResult.newBuilder() to construct.
  private InterpretResult(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private InterpretResult() {
    literal_ = "";
    interpretations_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new InterpretResult();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private InterpretResult(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            java.lang.String s = input.readStringRequireUtf8();

            literal_ = s;
            break;
          }
          case 18: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              interpretations_ = new java.util.ArrayList<com.nuance.rpc.nlu.v1.Interpretation>();
              mutable_bitField0_ |= 0x00000001;
            }
            interpretations_.add(
                input.readMessage(com.nuance.rpc.nlu.v1.Interpretation.parser(), extensionRegistry));
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        interpretations_ = java.util.Collections.unmodifiableList(interpretations_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.nuance.rpc.nlu.v1.ResultProto.internal_static_nuance_nlu_v1_InterpretResult_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.nuance.rpc.nlu.v1.ResultProto.internal_static_nuance_nlu_v1_InterpretResult_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.nuance.rpc.nlu.v1.InterpretResult.class, com.nuance.rpc.nlu.v1.InterpretResult.Builder.class);
  }

  public static final int LITERAL_FIELD_NUMBER = 1;
  private volatile java.lang.Object literal_;
  /**
   * <pre>
   * Literal used for interpretation. For text, this is always the raw input text. For ASR as a Service results, a concatenation of the audio tokens, separated by spaces.
   * </pre>
   *
   * <code>string literal = 1;</code>
   * @return The literal.
   */
  public java.lang.String getLiteral() {
    java.lang.Object ref = literal_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      literal_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Literal used for interpretation. For text, this is always the raw input text. For ASR as a Service results, a concatenation of the audio tokens, separated by spaces.
   * </pre>
   *
   * <code>string literal = 1;</code>
   * @return The bytes for literal.
   */
  public com.google.protobuf.ByteString
      getLiteralBytes() {
    java.lang.Object ref = literal_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      literal_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int INTERPRETATIONS_FIELD_NUMBER = 2;
  private java.util.List<com.nuance.rpc.nlu.v1.Interpretation> interpretations_;
  /**
   * <pre>
   * Repeated. Candidate interpretations of the original input.
   * </pre>
   *
   * <code>repeated .nuance.nlu.v1.Interpretation interpretations = 2;</code>
   */
  public java.util.List<com.nuance.rpc.nlu.v1.Interpretation> getInterpretationsList() {
    return interpretations_;
  }
  /**
   * <pre>
   * Repeated. Candidate interpretations of the original input.
   * </pre>
   *
   * <code>repeated .nuance.nlu.v1.Interpretation interpretations = 2;</code>
   */
  public java.util.List<? extends com.nuance.rpc.nlu.v1.InterpretationOrBuilder> 
      getInterpretationsOrBuilderList() {
    return interpretations_;
  }
  /**
   * <pre>
   * Repeated. Candidate interpretations of the original input.
   * </pre>
   *
   * <code>repeated .nuance.nlu.v1.Interpretation interpretations = 2;</code>
   */
  public int getInterpretationsCount() {
    return interpretations_.size();
  }
  /**
   * <pre>
   * Repeated. Candidate interpretations of the original input.
   * </pre>
   *
   * <code>repeated .nuance.nlu.v1.Interpretation interpretations = 2;</code>
   */
  public com.nuance.rpc.nlu.v1.Interpretation getInterpretations(int index) {
    return interpretations_.get(index);
  }
  /**
   * <pre>
   * Repeated. Candidate interpretations of the original input.
   * </pre>
   *
   * <code>repeated .nuance.nlu.v1.Interpretation interpretations = 2;</code>
   */
  public com.nuance.rpc.nlu.v1.InterpretationOrBuilder getInterpretationsOrBuilder(
      int index) {
    return interpretations_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!getLiteralBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, literal_);
    }
    for (int i = 0; i < interpretations_.size(); i++) {
      output.writeMessage(2, interpretations_.get(i));
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!getLiteralBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, literal_);
    }
    for (int i = 0; i < interpretations_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, interpretations_.get(i));
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.nuance.rpc.nlu.v1.InterpretResult)) {
      return super.equals(obj);
    }
    com.nuance.rpc.nlu.v1.InterpretResult other = (com.nuance.rpc.nlu.v1.InterpretResult) obj;

    if (!getLiteral()
        .equals(other.getLiteral())) return false;
    if (!getInterpretationsList()
        .equals(other.getInterpretationsList())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + LITERAL_FIELD_NUMBER;
    hash = (53 * hash) + getLiteral().hashCode();
    if (getInterpretationsCount() > 0) {
      hash = (37 * hash) + INTERPRETATIONS_FIELD_NUMBER;
      hash = (53 * hash) + getInterpretationsList().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.nuance.rpc.nlu.v1.InterpretResult parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.nuance.rpc.nlu.v1.InterpretResult parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.nuance.rpc.nlu.v1.InterpretResult parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.nuance.rpc.nlu.v1.InterpretResult parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.nuance.rpc.nlu.v1.InterpretResult parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.nuance.rpc.nlu.v1.InterpretResult parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.nuance.rpc.nlu.v1.InterpretResult parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.nuance.rpc.nlu.v1.InterpretResult parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.nuance.rpc.nlu.v1.InterpretResult parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.nuance.rpc.nlu.v1.InterpretResult parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.nuance.rpc.nlu.v1.InterpretResult parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.nuance.rpc.nlu.v1.InterpretResult parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.nuance.rpc.nlu.v1.InterpretResult prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   **
   * Result of interpretation. Contains the input literal and one or
   * more interpretations. Included in
   * [InterpretResponse](#interpretresponse).
   * </pre>
   *
   * Protobuf type {@code nuance.nlu.v1.InterpretResult}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:nuance.nlu.v1.InterpretResult)
      com.nuance.rpc.nlu.v1.InterpretResultOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.nuance.rpc.nlu.v1.ResultProto.internal_static_nuance_nlu_v1_InterpretResult_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.nuance.rpc.nlu.v1.ResultProto.internal_static_nuance_nlu_v1_InterpretResult_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.nuance.rpc.nlu.v1.InterpretResult.class, com.nuance.rpc.nlu.v1.InterpretResult.Builder.class);
    }

    // Construct using com.nuance.rpc.nlu.v1.InterpretResult.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getInterpretationsFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      literal_ = "";

      if (interpretationsBuilder_ == null) {
        interpretations_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        interpretationsBuilder_.clear();
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.nuance.rpc.nlu.v1.ResultProto.internal_static_nuance_nlu_v1_InterpretResult_descriptor;
    }

    @java.lang.Override
    public com.nuance.rpc.nlu.v1.InterpretResult getDefaultInstanceForType() {
      return com.nuance.rpc.nlu.v1.InterpretResult.getDefaultInstance();
    }

    @java.lang.Override
    public com.nuance.rpc.nlu.v1.InterpretResult build() {
      com.nuance.rpc.nlu.v1.InterpretResult result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.nuance.rpc.nlu.v1.InterpretResult buildPartial() {
      com.nuance.rpc.nlu.v1.InterpretResult result = new com.nuance.rpc.nlu.v1.InterpretResult(this);
      int from_bitField0_ = bitField0_;
      result.literal_ = literal_;
      if (interpretationsBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          interpretations_ = java.util.Collections.unmodifiableList(interpretations_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.interpretations_ = interpretations_;
      } else {
        result.interpretations_ = interpretationsBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.nuance.rpc.nlu.v1.InterpretResult) {
        return mergeFrom((com.nuance.rpc.nlu.v1.InterpretResult)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.nuance.rpc.nlu.v1.InterpretResult other) {
      if (other == com.nuance.rpc.nlu.v1.InterpretResult.getDefaultInstance()) return this;
      if (!other.getLiteral().isEmpty()) {
        literal_ = other.literal_;
        onChanged();
      }
      if (interpretationsBuilder_ == null) {
        if (!other.interpretations_.isEmpty()) {
          if (interpretations_.isEmpty()) {
            interpretations_ = other.interpretations_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureInterpretationsIsMutable();
            interpretations_.addAll(other.interpretations_);
          }
          onChanged();
        }
      } else {
        if (!other.interpretations_.isEmpty()) {
          if (interpretationsBuilder_.isEmpty()) {
            interpretationsBuilder_.dispose();
            interpretationsBuilder_ = null;
            interpretations_ = other.interpretations_;
            bitField0_ = (bitField0_ & ~0x00000001);
            interpretationsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getInterpretationsFieldBuilder() : null;
          } else {
            interpretationsBuilder_.addAllMessages(other.interpretations_);
          }
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.nuance.rpc.nlu.v1.InterpretResult parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.nuance.rpc.nlu.v1.InterpretResult) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.lang.Object literal_ = "";
    /**
     * <pre>
     * Literal used for interpretation. For text, this is always the raw input text. For ASR as a Service results, a concatenation of the audio tokens, separated by spaces.
     * </pre>
     *
     * <code>string literal = 1;</code>
     * @return The literal.
     */
    public java.lang.String getLiteral() {
      java.lang.Object ref = literal_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        literal_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Literal used for interpretation. For text, this is always the raw input text. For ASR as a Service results, a concatenation of the audio tokens, separated by spaces.
     * </pre>
     *
     * <code>string literal = 1;</code>
     * @return The bytes for literal.
     */
    public com.google.protobuf.ByteString
        getLiteralBytes() {
      java.lang.Object ref = literal_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        literal_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Literal used for interpretation. For text, this is always the raw input text. For ASR as a Service results, a concatenation of the audio tokens, separated by spaces.
     * </pre>
     *
     * <code>string literal = 1;</code>
     * @param value The literal to set.
     * @return This builder for chaining.
     */
    public Builder setLiteral(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      literal_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Literal used for interpretation. For text, this is always the raw input text. For ASR as a Service results, a concatenation of the audio tokens, separated by spaces.
     * </pre>
     *
     * <code>string literal = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearLiteral() {
      
      literal_ = getDefaultInstance().getLiteral();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Literal used for interpretation. For text, this is always the raw input text. For ASR as a Service results, a concatenation of the audio tokens, separated by spaces.
     * </pre>
     *
     * <code>string literal = 1;</code>
     * @param value The bytes for literal to set.
     * @return This builder for chaining.
     */
    public Builder setLiteralBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      literal_ = value;
      onChanged();
      return this;
    }

    private java.util.List<com.nuance.rpc.nlu.v1.Interpretation> interpretations_ =
      java.util.Collections.emptyList();
    private void ensureInterpretationsIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        interpretations_ = new java.util.ArrayList<com.nuance.rpc.nlu.v1.Interpretation>(interpretations_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.nuance.rpc.nlu.v1.Interpretation, com.nuance.rpc.nlu.v1.Interpretation.Builder, com.nuance.rpc.nlu.v1.InterpretationOrBuilder> interpretationsBuilder_;

    /**
     * <pre>
     * Repeated. Candidate interpretations of the original input.
     * </pre>
     *
     * <code>repeated .nuance.nlu.v1.Interpretation interpretations = 2;</code>
     */
    public java.util.List<com.nuance.rpc.nlu.v1.Interpretation> getInterpretationsList() {
      if (interpretationsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(interpretations_);
      } else {
        return interpretationsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Repeated. Candidate interpretations of the original input.
     * </pre>
     *
     * <code>repeated .nuance.nlu.v1.Interpretation interpretations = 2;</code>
     */
    public int getInterpretationsCount() {
      if (interpretationsBuilder_ == null) {
        return interpretations_.size();
      } else {
        return interpretationsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Repeated. Candidate interpretations of the original input.
     * </pre>
     *
     * <code>repeated .nuance.nlu.v1.Interpretation interpretations = 2;</code>
     */
    public com.nuance.rpc.nlu.v1.Interpretation getInterpretations(int index) {
      if (interpretationsBuilder_ == null) {
        return interpretations_.get(index);
      } else {
        return interpretationsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Repeated. Candidate interpretations of the original input.
     * </pre>
     *
     * <code>repeated .nuance.nlu.v1.Interpretation interpretations = 2;</code>
     */
    public Builder setInterpretations(
        int index, com.nuance.rpc.nlu.v1.Interpretation value) {
      if (interpretationsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureInterpretationsIsMutable();
        interpretations_.set(index, value);
        onChanged();
      } else {
        interpretationsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Repeated. Candidate interpretations of the original input.
     * </pre>
     *
     * <code>repeated .nuance.nlu.v1.Interpretation interpretations = 2;</code>
     */
    public Builder setInterpretations(
        int index, com.nuance.rpc.nlu.v1.Interpretation.Builder builderForValue) {
      if (interpretationsBuilder_ == null) {
        ensureInterpretationsIsMutable();
        interpretations_.set(index, builderForValue.build());
        onChanged();
      } else {
        interpretationsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Repeated. Candidate interpretations of the original input.
     * </pre>
     *
     * <code>repeated .nuance.nlu.v1.Interpretation interpretations = 2;</code>
     */
    public Builder addInterpretations(com.nuance.rpc.nlu.v1.Interpretation value) {
      if (interpretationsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureInterpretationsIsMutable();
        interpretations_.add(value);
        onChanged();
      } else {
        interpretationsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Repeated. Candidate interpretations of the original input.
     * </pre>
     *
     * <code>repeated .nuance.nlu.v1.Interpretation interpretations = 2;</code>
     */
    public Builder addInterpretations(
        int index, com.nuance.rpc.nlu.v1.Interpretation value) {
      if (interpretationsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureInterpretationsIsMutable();
        interpretations_.add(index, value);
        onChanged();
      } else {
        interpretationsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Repeated. Candidate interpretations of the original input.
     * </pre>
     *
     * <code>repeated .nuance.nlu.v1.Interpretation interpretations = 2;</code>
     */
    public Builder addInterpretations(
        com.nuance.rpc.nlu.v1.Interpretation.Builder builderForValue) {
      if (interpretationsBuilder_ == null) {
        ensureInterpretationsIsMutable();
        interpretations_.add(builderForValue.build());
        onChanged();
      } else {
        interpretationsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Repeated. Candidate interpretations of the original input.
     * </pre>
     *
     * <code>repeated .nuance.nlu.v1.Interpretation interpretations = 2;</code>
     */
    public Builder addInterpretations(
        int index, com.nuance.rpc.nlu.v1.Interpretation.Builder builderForValue) {
      if (interpretationsBuilder_ == null) {
        ensureInterpretationsIsMutable();
        interpretations_.add(index, builderForValue.build());
        onChanged();
      } else {
        interpretationsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Repeated. Candidate interpretations of the original input.
     * </pre>
     *
     * <code>repeated .nuance.nlu.v1.Interpretation interpretations = 2;</code>
     */
    public Builder addAllInterpretations(
        java.lang.Iterable<? extends com.nuance.rpc.nlu.v1.Interpretation> values) {
      if (interpretationsBuilder_ == null) {
        ensureInterpretationsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, interpretations_);
        onChanged();
      } else {
        interpretationsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Repeated. Candidate interpretations of the original input.
     * </pre>
     *
     * <code>repeated .nuance.nlu.v1.Interpretation interpretations = 2;</code>
     */
    public Builder clearInterpretations() {
      if (interpretationsBuilder_ == null) {
        interpretations_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        interpretationsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Repeated. Candidate interpretations of the original input.
     * </pre>
     *
     * <code>repeated .nuance.nlu.v1.Interpretation interpretations = 2;</code>
     */
    public Builder removeInterpretations(int index) {
      if (interpretationsBuilder_ == null) {
        ensureInterpretationsIsMutable();
        interpretations_.remove(index);
        onChanged();
      } else {
        interpretationsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Repeated. Candidate interpretations of the original input.
     * </pre>
     *
     * <code>repeated .nuance.nlu.v1.Interpretation interpretations = 2;</code>
     */
    public com.nuance.rpc.nlu.v1.Interpretation.Builder getInterpretationsBuilder(
        int index) {
      return getInterpretationsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Repeated. Candidate interpretations of the original input.
     * </pre>
     *
     * <code>repeated .nuance.nlu.v1.Interpretation interpretations = 2;</code>
     */
    public com.nuance.rpc.nlu.v1.InterpretationOrBuilder getInterpretationsOrBuilder(
        int index) {
      if (interpretationsBuilder_ == null) {
        return interpretations_.get(index);  } else {
        return interpretationsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Repeated. Candidate interpretations of the original input.
     * </pre>
     *
     * <code>repeated .nuance.nlu.v1.Interpretation interpretations = 2;</code>
     */
    public java.util.List<? extends com.nuance.rpc.nlu.v1.InterpretationOrBuilder> 
         getInterpretationsOrBuilderList() {
      if (interpretationsBuilder_ != null) {
        return interpretationsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(interpretations_);
      }
    }
    /**
     * <pre>
     * Repeated. Candidate interpretations of the original input.
     * </pre>
     *
     * <code>repeated .nuance.nlu.v1.Interpretation interpretations = 2;</code>
     */
    public com.nuance.rpc.nlu.v1.Interpretation.Builder addInterpretationsBuilder() {
      return getInterpretationsFieldBuilder().addBuilder(
          com.nuance.rpc.nlu.v1.Interpretation.getDefaultInstance());
    }
    /**
     * <pre>
     * Repeated. Candidate interpretations of the original input.
     * </pre>
     *
     * <code>repeated .nuance.nlu.v1.Interpretation interpretations = 2;</code>
     */
    public com.nuance.rpc.nlu.v1.Interpretation.Builder addInterpretationsBuilder(
        int index) {
      return getInterpretationsFieldBuilder().addBuilder(
          index, com.nuance.rpc.nlu.v1.Interpretation.getDefaultInstance());
    }
    /**
     * <pre>
     * Repeated. Candidate interpretations of the original input.
     * </pre>
     *
     * <code>repeated .nuance.nlu.v1.Interpretation interpretations = 2;</code>
     */
    public java.util.List<com.nuance.rpc.nlu.v1.Interpretation.Builder> 
         getInterpretationsBuilderList() {
      return getInterpretationsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.nuance.rpc.nlu.v1.Interpretation, com.nuance.rpc.nlu.v1.Interpretation.Builder, com.nuance.rpc.nlu.v1.InterpretationOrBuilder> 
        getInterpretationsFieldBuilder() {
      if (interpretationsBuilder_ == null) {
        interpretationsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.nuance.rpc.nlu.v1.Interpretation, com.nuance.rpc.nlu.v1.Interpretation.Builder, com.nuance.rpc.nlu.v1.InterpretationOrBuilder>(
                interpretations_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        interpretations_ = null;
      }
      return interpretationsBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:nuance.nlu.v1.InterpretResult)
  }

  // @@protoc_insertion_point(class_scope:nuance.nlu.v1.InterpretResult)
  private static final com.nuance.rpc.nlu.v1.InterpretResult DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.nuance.rpc.nlu.v1.InterpretResult();
  }

  public static com.nuance.rpc.nlu.v1.InterpretResult getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<InterpretResult>
      PARSER = new com.google.protobuf.AbstractParser<InterpretResult>() {
    @java.lang.Override
    public InterpretResult parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new InterpretResult(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<InterpretResult> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<InterpretResult> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.nuance.rpc.nlu.v1.InterpretResult getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

