// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: runtime.proto

package com.nuance.rpc.nlu.v1;

public interface InterpretRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:nuance.nlu.v1.InterpretRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Optional parameters for the interpretation.
   * </pre>
   *
   * <code>.nuance.nlu.v1.InterpretationParameters parameters = 1;</code>
   * @return Whether the parameters field is set.
   */
  boolean hasParameters();
  /**
   * <pre>
   * Optional parameters for the interpretation.
   * </pre>
   *
   * <code>.nuance.nlu.v1.InterpretationParameters parameters = 1;</code>
   * @return The parameters.
   */
  com.nuance.rpc.nlu.v1.InterpretationParameters getParameters();
  /**
   * <pre>
   * Optional parameters for the interpretation.
   * </pre>
   *
   * <code>.nuance.nlu.v1.InterpretationParameters parameters = 1;</code>
   */
  com.nuance.rpc.nlu.v1.InterpretationParametersOrBuilder getParametersOrBuilder();

  /**
   * <pre>
   * Required semantic model to perform the interpretation.
   * </pre>
   *
   * <code>.nuance.nlu.v1.ResourceReference model = 2;</code>
   * @return Whether the model field is set.
   */
  boolean hasModel();
  /**
   * <pre>
   * Required semantic model to perform the interpretation.
   * </pre>
   *
   * <code>.nuance.nlu.v1.ResourceReference model = 2;</code>
   * @return The model.
   */
  com.nuance.rpc.nlu.v1.ResourceReference getModel();
  /**
   * <pre>
   * Required semantic model to perform the interpretation.
   * </pre>
   *
   * <code>.nuance.nlu.v1.ResourceReference model = 2;</code>
   */
  com.nuance.rpc.nlu.v1.ResourceReferenceOrBuilder getModelOrBuilder();

  /**
   * <pre>
   * Repeated. Optional resources to customize the interpretation.
   * </pre>
   *
   * <code>repeated .nuance.nlu.v1.InterpretationResource resources = 3;</code>
   */
  java.util.List<com.nuance.rpc.nlu.v1.InterpretationResource> 
      getResourcesList();
  /**
   * <pre>
   * Repeated. Optional resources to customize the interpretation.
   * </pre>
   *
   * <code>repeated .nuance.nlu.v1.InterpretationResource resources = 3;</code>
   */
  com.nuance.rpc.nlu.v1.InterpretationResource getResources(int index);
  /**
   * <pre>
   * Repeated. Optional resources to customize the interpretation.
   * </pre>
   *
   * <code>repeated .nuance.nlu.v1.InterpretationResource resources = 3;</code>
   */
  int getResourcesCount();
  /**
   * <pre>
   * Repeated. Optional resources to customize the interpretation.
   * </pre>
   *
   * <code>repeated .nuance.nlu.v1.InterpretationResource resources = 3;</code>
   */
  java.util.List<? extends com.nuance.rpc.nlu.v1.InterpretationResourceOrBuilder> 
      getResourcesOrBuilderList();
  /**
   * <pre>
   * Repeated. Optional resources to customize the interpretation.
   * </pre>
   *
   * <code>repeated .nuance.nlu.v1.InterpretationResource resources = 3;</code>
   */
  com.nuance.rpc.nlu.v1.InterpretationResourceOrBuilder getResourcesOrBuilder(
      int index);

  /**
   * <pre>
   * Optional key-value pairs to log.
   * </pre>
   *
   * <code>map&lt;string, string&gt; client_data = 4;</code>
   */
  int getClientDataCount();
  /**
   * <pre>
   * Optional key-value pairs to log.
   * </pre>
   *
   * <code>map&lt;string, string&gt; client_data = 4;</code>
   */
  boolean containsClientData(
      java.lang.String key);
  /**
   * Use {@link #getClientDataMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, java.lang.String>
  getClientData();
  /**
   * <pre>
   * Optional key-value pairs to log.
   * </pre>
   *
   * <code>map&lt;string, string&gt; client_data = 4;</code>
   */
  java.util.Map<java.lang.String, java.lang.String>
  getClientDataMap();
  /**
   * <pre>
   * Optional key-value pairs to log.
   * </pre>
   *
   * <code>map&lt;string, string&gt; client_data = 4;</code>
   */

  java.lang.String getClientDataOrDefault(
      java.lang.String key,
      java.lang.String defaultValue);
  /**
   * <pre>
   * Optional key-value pairs to log.
   * </pre>
   *
   * <code>map&lt;string, string&gt; client_data = 4;</code>
   */

  java.lang.String getClientDataOrThrow(
      java.lang.String key);

  /**
   * <pre>
   * Required input to interpret.
   * </pre>
   *
   * <code>.nuance.nlu.v1.InterpretationInput input = 10;</code>
   * @return Whether the input field is set.
   */
  boolean hasInput();
  /**
   * <pre>
   * Required input to interpret.
   * </pre>
   *
   * <code>.nuance.nlu.v1.InterpretationInput input = 10;</code>
   * @return The input.
   */
  com.nuance.rpc.nlu.v1.InterpretationInput getInput();
  /**
   * <pre>
   * Required input to interpret.
   * </pre>
   *
   * <code>.nuance.nlu.v1.InterpretationInput input = 10;</code>
   */
  com.nuance.rpc.nlu.v1.InterpretationInputOrBuilder getInputOrBuilder();
}
