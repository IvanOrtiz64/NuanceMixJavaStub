// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: result.proto

package com.nuance.rpc.nlu.v1;

/**
 * <pre>
 **
 * Candidate interpretation of the input. Included in
 * [InterpretResult](#interpretresult).
 * The type of interpretation is either single- or multi-intent. When
 * requesting an interpretation, use interpretation_result_type in
 * [InterpretationParameters](#interpretationparameters) to specify the
 * desired type.
 * When requesting a multi-intent interpretation with a single-intent
 * semantic model, the root of the multi-intent interpretation object
 * contains the intent.
 * When requesting a single-intent interpretation and the result
 * contains multiple intents, NLU as a Service converts the result to
 * a single-intent interpretation. It does this by returning the
 * breadth-first child of the root of the multi-intent
 * interpretation. For example, if the multi-intent interpretation's
 * root is an AND operator with a child intent PayBill then a child
 * intent GetBalance, NLU as a Service returns a single-intent
 * intepretation for only the PayBill intent.
 * </pre>
 *
 * Protobuf type {@code nuance.nlu.v1.Interpretation}
 */
public  final class Interpretation extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:nuance.nlu.v1.Interpretation)
    InterpretationOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Interpretation.newBuilder() to construct.
  private Interpretation(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Interpretation() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new Interpretation();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private Interpretation(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            com.nuance.rpc.nlu.v1.SingleIntentInterpretation.Builder subBuilder = null;
            if (interpretationUnionCase_ == 1) {
              subBuilder = ((com.nuance.rpc.nlu.v1.SingleIntentInterpretation) interpretationUnion_).toBuilder();
            }
            interpretationUnion_ =
                input.readMessage(com.nuance.rpc.nlu.v1.SingleIntentInterpretation.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.nuance.rpc.nlu.v1.SingleIntentInterpretation) interpretationUnion_);
              interpretationUnion_ = subBuilder.buildPartial();
            }
            interpretationUnionCase_ = 1;
            break;
          }
          case 18: {
            com.nuance.rpc.nlu.v1.MultiIntentInterpretation.Builder subBuilder = null;
            if (interpretationUnionCase_ == 2) {
              subBuilder = ((com.nuance.rpc.nlu.v1.MultiIntentInterpretation) interpretationUnion_).toBuilder();
            }
            interpretationUnion_ =
                input.readMessage(com.nuance.rpc.nlu.v1.MultiIntentInterpretation.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.nuance.rpc.nlu.v1.MultiIntentInterpretation) interpretationUnion_);
              interpretationUnion_ = subBuilder.buildPartial();
            }
            interpretationUnionCase_ = 2;
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.nuance.rpc.nlu.v1.ResultProto.internal_static_nuance_nlu_v1_Interpretation_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.nuance.rpc.nlu.v1.ResultProto.internal_static_nuance_nlu_v1_Interpretation_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.nuance.rpc.nlu.v1.Interpretation.class, com.nuance.rpc.nlu.v1.Interpretation.Builder.class);
  }

  private int interpretationUnionCase_ = 0;
  private java.lang.Object interpretationUnion_;
  public enum InterpretationUnionCase
      implements com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    SINGLE_INTENT_INTERPRETATION(1),
    MULTI_INTENT_INTERPRETATION(2),
    INTERPRETATIONUNION_NOT_SET(0);
    private final int value;
    private InterpretationUnionCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static InterpretationUnionCase valueOf(int value) {
      return forNumber(value);
    }

    public static InterpretationUnionCase forNumber(int value) {
      switch (value) {
        case 1: return SINGLE_INTENT_INTERPRETATION;
        case 2: return MULTI_INTENT_INTERPRETATION;
        case 0: return INTERPRETATIONUNION_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public InterpretationUnionCase
  getInterpretationUnionCase() {
    return InterpretationUnionCase.forNumber(
        interpretationUnionCase_);
  }

  public static final int SINGLE_INTENT_INTERPRETATION_FIELD_NUMBER = 1;
  /**
   * <pre>
   * The result contains one intent.
   * </pre>
   *
   * <code>.nuance.nlu.v1.SingleIntentInterpretation single_intent_interpretation = 1;</code>
   * @return Whether the singleIntentInterpretation field is set.
   */
  public boolean hasSingleIntentInterpretation() {
    return interpretationUnionCase_ == 1;
  }
  /**
   * <pre>
   * The result contains one intent.
   * </pre>
   *
   * <code>.nuance.nlu.v1.SingleIntentInterpretation single_intent_interpretation = 1;</code>
   * @return The singleIntentInterpretation.
   */
  public com.nuance.rpc.nlu.v1.SingleIntentInterpretation getSingleIntentInterpretation() {
    if (interpretationUnionCase_ == 1) {
       return (com.nuance.rpc.nlu.v1.SingleIntentInterpretation) interpretationUnion_;
    }
    return com.nuance.rpc.nlu.v1.SingleIntentInterpretation.getDefaultInstance();
  }
  /**
   * <pre>
   * The result contains one intent.
   * </pre>
   *
   * <code>.nuance.nlu.v1.SingleIntentInterpretation single_intent_interpretation = 1;</code>
   */
  public com.nuance.rpc.nlu.v1.SingleIntentInterpretationOrBuilder getSingleIntentInterpretationOrBuilder() {
    if (interpretationUnionCase_ == 1) {
       return (com.nuance.rpc.nlu.v1.SingleIntentInterpretation) interpretationUnion_;
    }
    return com.nuance.rpc.nlu.v1.SingleIntentInterpretation.getDefaultInstance();
  }

  public static final int MULTI_INTENT_INTERPRETATION_FIELD_NUMBER = 2;
  /**
   * <pre>
   * The result contains multiple intents. This choice requires a multi-intent semantic model, which is not currently supported in Nuance-hosted NLUaaS.
   * </pre>
   *
   * <code>.nuance.nlu.v1.MultiIntentInterpretation multi_intent_interpretation = 2;</code>
   * @return Whether the multiIntentInterpretation field is set.
   */
  public boolean hasMultiIntentInterpretation() {
    return interpretationUnionCase_ == 2;
  }
  /**
   * <pre>
   * The result contains multiple intents. This choice requires a multi-intent semantic model, which is not currently supported in Nuance-hosted NLUaaS.
   * </pre>
   *
   * <code>.nuance.nlu.v1.MultiIntentInterpretation multi_intent_interpretation = 2;</code>
   * @return The multiIntentInterpretation.
   */
  public com.nuance.rpc.nlu.v1.MultiIntentInterpretation getMultiIntentInterpretation() {
    if (interpretationUnionCase_ == 2) {
       return (com.nuance.rpc.nlu.v1.MultiIntentInterpretation) interpretationUnion_;
    }
    return com.nuance.rpc.nlu.v1.MultiIntentInterpretation.getDefaultInstance();
  }
  /**
   * <pre>
   * The result contains multiple intents. This choice requires a multi-intent semantic model, which is not currently supported in Nuance-hosted NLUaaS.
   * </pre>
   *
   * <code>.nuance.nlu.v1.MultiIntentInterpretation multi_intent_interpretation = 2;</code>
   */
  public com.nuance.rpc.nlu.v1.MultiIntentInterpretationOrBuilder getMultiIntentInterpretationOrBuilder() {
    if (interpretationUnionCase_ == 2) {
       return (com.nuance.rpc.nlu.v1.MultiIntentInterpretation) interpretationUnion_;
    }
    return com.nuance.rpc.nlu.v1.MultiIntentInterpretation.getDefaultInstance();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (interpretationUnionCase_ == 1) {
      output.writeMessage(1, (com.nuance.rpc.nlu.v1.SingleIntentInterpretation) interpretationUnion_);
    }
    if (interpretationUnionCase_ == 2) {
      output.writeMessage(2, (com.nuance.rpc.nlu.v1.MultiIntentInterpretation) interpretationUnion_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (interpretationUnionCase_ == 1) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, (com.nuance.rpc.nlu.v1.SingleIntentInterpretation) interpretationUnion_);
    }
    if (interpretationUnionCase_ == 2) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, (com.nuance.rpc.nlu.v1.MultiIntentInterpretation) interpretationUnion_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.nuance.rpc.nlu.v1.Interpretation)) {
      return super.equals(obj);
    }
    com.nuance.rpc.nlu.v1.Interpretation other = (com.nuance.rpc.nlu.v1.Interpretation) obj;

    if (!getInterpretationUnionCase().equals(other.getInterpretationUnionCase())) return false;
    switch (interpretationUnionCase_) {
      case 1:
        if (!getSingleIntentInterpretation()
            .equals(other.getSingleIntentInterpretation())) return false;
        break;
      case 2:
        if (!getMultiIntentInterpretation()
            .equals(other.getMultiIntentInterpretation())) return false;
        break;
      case 0:
      default:
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    switch (interpretationUnionCase_) {
      case 1:
        hash = (37 * hash) + SINGLE_INTENT_INTERPRETATION_FIELD_NUMBER;
        hash = (53 * hash) + getSingleIntentInterpretation().hashCode();
        break;
      case 2:
        hash = (37 * hash) + MULTI_INTENT_INTERPRETATION_FIELD_NUMBER;
        hash = (53 * hash) + getMultiIntentInterpretation().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.nuance.rpc.nlu.v1.Interpretation parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.nuance.rpc.nlu.v1.Interpretation parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.nuance.rpc.nlu.v1.Interpretation parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.nuance.rpc.nlu.v1.Interpretation parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.nuance.rpc.nlu.v1.Interpretation parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.nuance.rpc.nlu.v1.Interpretation parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.nuance.rpc.nlu.v1.Interpretation parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.nuance.rpc.nlu.v1.Interpretation parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.nuance.rpc.nlu.v1.Interpretation parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.nuance.rpc.nlu.v1.Interpretation parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.nuance.rpc.nlu.v1.Interpretation parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.nuance.rpc.nlu.v1.Interpretation parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.nuance.rpc.nlu.v1.Interpretation prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   **
   * Candidate interpretation of the input. Included in
   * [InterpretResult](#interpretresult).
   * The type of interpretation is either single- or multi-intent. When
   * requesting an interpretation, use interpretation_result_type in
   * [InterpretationParameters](#interpretationparameters) to specify the
   * desired type.
   * When requesting a multi-intent interpretation with a single-intent
   * semantic model, the root of the multi-intent interpretation object
   * contains the intent.
   * When requesting a single-intent interpretation and the result
   * contains multiple intents, NLU as a Service converts the result to
   * a single-intent interpretation. It does this by returning the
   * breadth-first child of the root of the multi-intent
   * interpretation. For example, if the multi-intent interpretation's
   * root is an AND operator with a child intent PayBill then a child
   * intent GetBalance, NLU as a Service returns a single-intent
   * intepretation for only the PayBill intent.
   * </pre>
   *
   * Protobuf type {@code nuance.nlu.v1.Interpretation}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:nuance.nlu.v1.Interpretation)
      com.nuance.rpc.nlu.v1.InterpretationOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.nuance.rpc.nlu.v1.ResultProto.internal_static_nuance_nlu_v1_Interpretation_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.nuance.rpc.nlu.v1.ResultProto.internal_static_nuance_nlu_v1_Interpretation_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.nuance.rpc.nlu.v1.Interpretation.class, com.nuance.rpc.nlu.v1.Interpretation.Builder.class);
    }

    // Construct using com.nuance.rpc.nlu.v1.Interpretation.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      interpretationUnionCase_ = 0;
      interpretationUnion_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.nuance.rpc.nlu.v1.ResultProto.internal_static_nuance_nlu_v1_Interpretation_descriptor;
    }

    @java.lang.Override
    public com.nuance.rpc.nlu.v1.Interpretation getDefaultInstanceForType() {
      return com.nuance.rpc.nlu.v1.Interpretation.getDefaultInstance();
    }

    @java.lang.Override
    public com.nuance.rpc.nlu.v1.Interpretation build() {
      com.nuance.rpc.nlu.v1.Interpretation result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.nuance.rpc.nlu.v1.Interpretation buildPartial() {
      com.nuance.rpc.nlu.v1.Interpretation result = new com.nuance.rpc.nlu.v1.Interpretation(this);
      if (interpretationUnionCase_ == 1) {
        if (singleIntentInterpretationBuilder_ == null) {
          result.interpretationUnion_ = interpretationUnion_;
        } else {
          result.interpretationUnion_ = singleIntentInterpretationBuilder_.build();
        }
      }
      if (interpretationUnionCase_ == 2) {
        if (multiIntentInterpretationBuilder_ == null) {
          result.interpretationUnion_ = interpretationUnion_;
        } else {
          result.interpretationUnion_ = multiIntentInterpretationBuilder_.build();
        }
      }
      result.interpretationUnionCase_ = interpretationUnionCase_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.nuance.rpc.nlu.v1.Interpretation) {
        return mergeFrom((com.nuance.rpc.nlu.v1.Interpretation)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.nuance.rpc.nlu.v1.Interpretation other) {
      if (other == com.nuance.rpc.nlu.v1.Interpretation.getDefaultInstance()) return this;
      switch (other.getInterpretationUnionCase()) {
        case SINGLE_INTENT_INTERPRETATION: {
          mergeSingleIntentInterpretation(other.getSingleIntentInterpretation());
          break;
        }
        case MULTI_INTENT_INTERPRETATION: {
          mergeMultiIntentInterpretation(other.getMultiIntentInterpretation());
          break;
        }
        case INTERPRETATIONUNION_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.nuance.rpc.nlu.v1.Interpretation parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.nuance.rpc.nlu.v1.Interpretation) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int interpretationUnionCase_ = 0;
    private java.lang.Object interpretationUnion_;
    public InterpretationUnionCase
        getInterpretationUnionCase() {
      return InterpretationUnionCase.forNumber(
          interpretationUnionCase_);
    }

    public Builder clearInterpretationUnion() {
      interpretationUnionCase_ = 0;
      interpretationUnion_ = null;
      onChanged();
      return this;
    }


    private com.google.protobuf.SingleFieldBuilderV3<
        com.nuance.rpc.nlu.v1.SingleIntentInterpretation, com.nuance.rpc.nlu.v1.SingleIntentInterpretation.Builder, com.nuance.rpc.nlu.v1.SingleIntentInterpretationOrBuilder> singleIntentInterpretationBuilder_;
    /**
     * <pre>
     * The result contains one intent.
     * </pre>
     *
     * <code>.nuance.nlu.v1.SingleIntentInterpretation single_intent_interpretation = 1;</code>
     * @return Whether the singleIntentInterpretation field is set.
     */
    public boolean hasSingleIntentInterpretation() {
      return interpretationUnionCase_ == 1;
    }
    /**
     * <pre>
     * The result contains one intent.
     * </pre>
     *
     * <code>.nuance.nlu.v1.SingleIntentInterpretation single_intent_interpretation = 1;</code>
     * @return The singleIntentInterpretation.
     */
    public com.nuance.rpc.nlu.v1.SingleIntentInterpretation getSingleIntentInterpretation() {
      if (singleIntentInterpretationBuilder_ == null) {
        if (interpretationUnionCase_ == 1) {
          return (com.nuance.rpc.nlu.v1.SingleIntentInterpretation) interpretationUnion_;
        }
        return com.nuance.rpc.nlu.v1.SingleIntentInterpretation.getDefaultInstance();
      } else {
        if (interpretationUnionCase_ == 1) {
          return singleIntentInterpretationBuilder_.getMessage();
        }
        return com.nuance.rpc.nlu.v1.SingleIntentInterpretation.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * The result contains one intent.
     * </pre>
     *
     * <code>.nuance.nlu.v1.SingleIntentInterpretation single_intent_interpretation = 1;</code>
     */
    public Builder setSingleIntentInterpretation(com.nuance.rpc.nlu.v1.SingleIntentInterpretation value) {
      if (singleIntentInterpretationBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        interpretationUnion_ = value;
        onChanged();
      } else {
        singleIntentInterpretationBuilder_.setMessage(value);
      }
      interpretationUnionCase_ = 1;
      return this;
    }
    /**
     * <pre>
     * The result contains one intent.
     * </pre>
     *
     * <code>.nuance.nlu.v1.SingleIntentInterpretation single_intent_interpretation = 1;</code>
     */
    public Builder setSingleIntentInterpretation(
        com.nuance.rpc.nlu.v1.SingleIntentInterpretation.Builder builderForValue) {
      if (singleIntentInterpretationBuilder_ == null) {
        interpretationUnion_ = builderForValue.build();
        onChanged();
      } else {
        singleIntentInterpretationBuilder_.setMessage(builderForValue.build());
      }
      interpretationUnionCase_ = 1;
      return this;
    }
    /**
     * <pre>
     * The result contains one intent.
     * </pre>
     *
     * <code>.nuance.nlu.v1.SingleIntentInterpretation single_intent_interpretation = 1;</code>
     */
    public Builder mergeSingleIntentInterpretation(com.nuance.rpc.nlu.v1.SingleIntentInterpretation value) {
      if (singleIntentInterpretationBuilder_ == null) {
        if (interpretationUnionCase_ == 1 &&
            interpretationUnion_ != com.nuance.rpc.nlu.v1.SingleIntentInterpretation.getDefaultInstance()) {
          interpretationUnion_ = com.nuance.rpc.nlu.v1.SingleIntentInterpretation.newBuilder((com.nuance.rpc.nlu.v1.SingleIntentInterpretation) interpretationUnion_)
              .mergeFrom(value).buildPartial();
        } else {
          interpretationUnion_ = value;
        }
        onChanged();
      } else {
        if (interpretationUnionCase_ == 1) {
          singleIntentInterpretationBuilder_.mergeFrom(value);
        }
        singleIntentInterpretationBuilder_.setMessage(value);
      }
      interpretationUnionCase_ = 1;
      return this;
    }
    /**
     * <pre>
     * The result contains one intent.
     * </pre>
     *
     * <code>.nuance.nlu.v1.SingleIntentInterpretation single_intent_interpretation = 1;</code>
     */
    public Builder clearSingleIntentInterpretation() {
      if (singleIntentInterpretationBuilder_ == null) {
        if (interpretationUnionCase_ == 1) {
          interpretationUnionCase_ = 0;
          interpretationUnion_ = null;
          onChanged();
        }
      } else {
        if (interpretationUnionCase_ == 1) {
          interpretationUnionCase_ = 0;
          interpretationUnion_ = null;
        }
        singleIntentInterpretationBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * The result contains one intent.
     * </pre>
     *
     * <code>.nuance.nlu.v1.SingleIntentInterpretation single_intent_interpretation = 1;</code>
     */
    public com.nuance.rpc.nlu.v1.SingleIntentInterpretation.Builder getSingleIntentInterpretationBuilder() {
      return getSingleIntentInterpretationFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The result contains one intent.
     * </pre>
     *
     * <code>.nuance.nlu.v1.SingleIntentInterpretation single_intent_interpretation = 1;</code>
     */
    public com.nuance.rpc.nlu.v1.SingleIntentInterpretationOrBuilder getSingleIntentInterpretationOrBuilder() {
      if ((interpretationUnionCase_ == 1) && (singleIntentInterpretationBuilder_ != null)) {
        return singleIntentInterpretationBuilder_.getMessageOrBuilder();
      } else {
        if (interpretationUnionCase_ == 1) {
          return (com.nuance.rpc.nlu.v1.SingleIntentInterpretation) interpretationUnion_;
        }
        return com.nuance.rpc.nlu.v1.SingleIntentInterpretation.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * The result contains one intent.
     * </pre>
     *
     * <code>.nuance.nlu.v1.SingleIntentInterpretation single_intent_interpretation = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.nuance.rpc.nlu.v1.SingleIntentInterpretation, com.nuance.rpc.nlu.v1.SingleIntentInterpretation.Builder, com.nuance.rpc.nlu.v1.SingleIntentInterpretationOrBuilder> 
        getSingleIntentInterpretationFieldBuilder() {
      if (singleIntentInterpretationBuilder_ == null) {
        if (!(interpretationUnionCase_ == 1)) {
          interpretationUnion_ = com.nuance.rpc.nlu.v1.SingleIntentInterpretation.getDefaultInstance();
        }
        singleIntentInterpretationBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.nuance.rpc.nlu.v1.SingleIntentInterpretation, com.nuance.rpc.nlu.v1.SingleIntentInterpretation.Builder, com.nuance.rpc.nlu.v1.SingleIntentInterpretationOrBuilder>(
                (com.nuance.rpc.nlu.v1.SingleIntentInterpretation) interpretationUnion_,
                getParentForChildren(),
                isClean());
        interpretationUnion_ = null;
      }
      interpretationUnionCase_ = 1;
      onChanged();;
      return singleIntentInterpretationBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.nuance.rpc.nlu.v1.MultiIntentInterpretation, com.nuance.rpc.nlu.v1.MultiIntentInterpretation.Builder, com.nuance.rpc.nlu.v1.MultiIntentInterpretationOrBuilder> multiIntentInterpretationBuilder_;
    /**
     * <pre>
     * The result contains multiple intents. This choice requires a multi-intent semantic model, which is not currently supported in Nuance-hosted NLUaaS.
     * </pre>
     *
     * <code>.nuance.nlu.v1.MultiIntentInterpretation multi_intent_interpretation = 2;</code>
     * @return Whether the multiIntentInterpretation field is set.
     */
    public boolean hasMultiIntentInterpretation() {
      return interpretationUnionCase_ == 2;
    }
    /**
     * <pre>
     * The result contains multiple intents. This choice requires a multi-intent semantic model, which is not currently supported in Nuance-hosted NLUaaS.
     * </pre>
     *
     * <code>.nuance.nlu.v1.MultiIntentInterpretation multi_intent_interpretation = 2;</code>
     * @return The multiIntentInterpretation.
     */
    public com.nuance.rpc.nlu.v1.MultiIntentInterpretation getMultiIntentInterpretation() {
      if (multiIntentInterpretationBuilder_ == null) {
        if (interpretationUnionCase_ == 2) {
          return (com.nuance.rpc.nlu.v1.MultiIntentInterpretation) interpretationUnion_;
        }
        return com.nuance.rpc.nlu.v1.MultiIntentInterpretation.getDefaultInstance();
      } else {
        if (interpretationUnionCase_ == 2) {
          return multiIntentInterpretationBuilder_.getMessage();
        }
        return com.nuance.rpc.nlu.v1.MultiIntentInterpretation.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * The result contains multiple intents. This choice requires a multi-intent semantic model, which is not currently supported in Nuance-hosted NLUaaS.
     * </pre>
     *
     * <code>.nuance.nlu.v1.MultiIntentInterpretation multi_intent_interpretation = 2;</code>
     */
    public Builder setMultiIntentInterpretation(com.nuance.rpc.nlu.v1.MultiIntentInterpretation value) {
      if (multiIntentInterpretationBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        interpretationUnion_ = value;
        onChanged();
      } else {
        multiIntentInterpretationBuilder_.setMessage(value);
      }
      interpretationUnionCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * The result contains multiple intents. This choice requires a multi-intent semantic model, which is not currently supported in Nuance-hosted NLUaaS.
     * </pre>
     *
     * <code>.nuance.nlu.v1.MultiIntentInterpretation multi_intent_interpretation = 2;</code>
     */
    public Builder setMultiIntentInterpretation(
        com.nuance.rpc.nlu.v1.MultiIntentInterpretation.Builder builderForValue) {
      if (multiIntentInterpretationBuilder_ == null) {
        interpretationUnion_ = builderForValue.build();
        onChanged();
      } else {
        multiIntentInterpretationBuilder_.setMessage(builderForValue.build());
      }
      interpretationUnionCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * The result contains multiple intents. This choice requires a multi-intent semantic model, which is not currently supported in Nuance-hosted NLUaaS.
     * </pre>
     *
     * <code>.nuance.nlu.v1.MultiIntentInterpretation multi_intent_interpretation = 2;</code>
     */
    public Builder mergeMultiIntentInterpretation(com.nuance.rpc.nlu.v1.MultiIntentInterpretation value) {
      if (multiIntentInterpretationBuilder_ == null) {
        if (interpretationUnionCase_ == 2 &&
            interpretationUnion_ != com.nuance.rpc.nlu.v1.MultiIntentInterpretation.getDefaultInstance()) {
          interpretationUnion_ = com.nuance.rpc.nlu.v1.MultiIntentInterpretation.newBuilder((com.nuance.rpc.nlu.v1.MultiIntentInterpretation) interpretationUnion_)
              .mergeFrom(value).buildPartial();
        } else {
          interpretationUnion_ = value;
        }
        onChanged();
      } else {
        if (interpretationUnionCase_ == 2) {
          multiIntentInterpretationBuilder_.mergeFrom(value);
        }
        multiIntentInterpretationBuilder_.setMessage(value);
      }
      interpretationUnionCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * The result contains multiple intents. This choice requires a multi-intent semantic model, which is not currently supported in Nuance-hosted NLUaaS.
     * </pre>
     *
     * <code>.nuance.nlu.v1.MultiIntentInterpretation multi_intent_interpretation = 2;</code>
     */
    public Builder clearMultiIntentInterpretation() {
      if (multiIntentInterpretationBuilder_ == null) {
        if (interpretationUnionCase_ == 2) {
          interpretationUnionCase_ = 0;
          interpretationUnion_ = null;
          onChanged();
        }
      } else {
        if (interpretationUnionCase_ == 2) {
          interpretationUnionCase_ = 0;
          interpretationUnion_ = null;
        }
        multiIntentInterpretationBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * The result contains multiple intents. This choice requires a multi-intent semantic model, which is not currently supported in Nuance-hosted NLUaaS.
     * </pre>
     *
     * <code>.nuance.nlu.v1.MultiIntentInterpretation multi_intent_interpretation = 2;</code>
     */
    public com.nuance.rpc.nlu.v1.MultiIntentInterpretation.Builder getMultiIntentInterpretationBuilder() {
      return getMultiIntentInterpretationFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The result contains multiple intents. This choice requires a multi-intent semantic model, which is not currently supported in Nuance-hosted NLUaaS.
     * </pre>
     *
     * <code>.nuance.nlu.v1.MultiIntentInterpretation multi_intent_interpretation = 2;</code>
     */
    public com.nuance.rpc.nlu.v1.MultiIntentInterpretationOrBuilder getMultiIntentInterpretationOrBuilder() {
      if ((interpretationUnionCase_ == 2) && (multiIntentInterpretationBuilder_ != null)) {
        return multiIntentInterpretationBuilder_.getMessageOrBuilder();
      } else {
        if (interpretationUnionCase_ == 2) {
          return (com.nuance.rpc.nlu.v1.MultiIntentInterpretation) interpretationUnion_;
        }
        return com.nuance.rpc.nlu.v1.MultiIntentInterpretation.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * The result contains multiple intents. This choice requires a multi-intent semantic model, which is not currently supported in Nuance-hosted NLUaaS.
     * </pre>
     *
     * <code>.nuance.nlu.v1.MultiIntentInterpretation multi_intent_interpretation = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.nuance.rpc.nlu.v1.MultiIntentInterpretation, com.nuance.rpc.nlu.v1.MultiIntentInterpretation.Builder, com.nuance.rpc.nlu.v1.MultiIntentInterpretationOrBuilder> 
        getMultiIntentInterpretationFieldBuilder() {
      if (multiIntentInterpretationBuilder_ == null) {
        if (!(interpretationUnionCase_ == 2)) {
          interpretationUnion_ = com.nuance.rpc.nlu.v1.MultiIntentInterpretation.getDefaultInstance();
        }
        multiIntentInterpretationBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.nuance.rpc.nlu.v1.MultiIntentInterpretation, com.nuance.rpc.nlu.v1.MultiIntentInterpretation.Builder, com.nuance.rpc.nlu.v1.MultiIntentInterpretationOrBuilder>(
                (com.nuance.rpc.nlu.v1.MultiIntentInterpretation) interpretationUnion_,
                getParentForChildren(),
                isClean());
        interpretationUnion_ = null;
      }
      interpretationUnionCase_ = 2;
      onChanged();;
      return multiIntentInterpretationBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:nuance.nlu.v1.Interpretation)
  }

  // @@protoc_insertion_point(class_scope:nuance.nlu.v1.Interpretation)
  private static final com.nuance.rpc.nlu.v1.Interpretation DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.nuance.rpc.nlu.v1.Interpretation();
  }

  public static com.nuance.rpc.nlu.v1.Interpretation getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Interpretation>
      PARSER = new com.google.protobuf.AbstractParser<Interpretation>() {
    @java.lang.Override
    public Interpretation parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new Interpretation(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<Interpretation> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Interpretation> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.nuance.rpc.nlu.v1.Interpretation getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

