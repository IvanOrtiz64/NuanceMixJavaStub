// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: runtime.proto

package com.nuance.rpc.nlu.v1;

/**
 * <pre>
 **
 * Optional parameters controlling the interpretation. Included in
 * [InterpretRequest](#interpretrequest).
 * </pre>
 *
 * Protobuf type {@code nuance.nlu.v1.InterpretationParameters}
 */
public  final class InterpretationParameters extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:nuance.nlu.v1.InterpretationParameters)
    InterpretationParametersOrBuilder {
private static final long serialVersionUID = 0L;
  // Use InterpretationParameters.newBuilder() to construct.
  private InterpretationParameters(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private InterpretationParameters() {
    interpretationResultType_ = 0;
    interpretationInputLoggingMode_ = 0;
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new InterpretationParameters();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private InterpretationParameters(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 8: {
            int rawValue = input.readEnum();

            interpretationResultType_ = rawValue;
            break;
          }
          case 16: {
            int rawValue = input.readEnum();

            interpretationInputLoggingMode_ = rawValue;
            break;
          }
          case 26: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              postProcessingScriptParameters_ = com.google.protobuf.MapField.newMapField(
                  PostProcessingScriptParametersDefaultEntryHolder.defaultEntry);
              mutable_bitField0_ |= 0x00000001;
            }
            com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
            postProcessingScriptParameters__ = input.readMessage(
                PostProcessingScriptParametersDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
            postProcessingScriptParameters_.getMutableMap().put(
                postProcessingScriptParameters__.getKey(), postProcessingScriptParameters__.getValue());
            break;
          }
          case 96: {

            maxInterpretations_ = input.readUInt32();
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.nuance.rpc.nlu.v1.RuntimeProto.internal_static_nuance_nlu_v1_InterpretationParameters_descriptor;
  }

  @SuppressWarnings({"rawtypes"})
  @java.lang.Override
  protected com.google.protobuf.MapField internalGetMapField(
      int number) {
    switch (number) {
      case 3:
        return internalGetPostProcessingScriptParameters();
      default:
        throw new RuntimeException(
            "Invalid map field number: " + number);
    }
  }
  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.nuance.rpc.nlu.v1.RuntimeProto.internal_static_nuance_nlu_v1_InterpretationParameters_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.nuance.rpc.nlu.v1.InterpretationParameters.class, com.nuance.rpc.nlu.v1.InterpretationParameters.Builder.class);
  }

  public static final int INTERPRETATION_RESULT_TYPE_FIELD_NUMBER = 1;
  private int interpretationResultType_;
  /**
   * <pre>
   * Format of interpretation result. Default is SINGLE_INTENT.
   * </pre>
   *
   * <code>.nuance.nlu.v1.EnumInterpretationResultType interpretation_result_type = 1;</code>
   * @return The enum numeric value on the wire for interpretationResultType.
   */
  public int getInterpretationResultTypeValue() {
    return interpretationResultType_;
  }
  /**
   * <pre>
   * Format of interpretation result. Default is SINGLE_INTENT.
   * </pre>
   *
   * <code>.nuance.nlu.v1.EnumInterpretationResultType interpretation_result_type = 1;</code>
   * @return The interpretationResultType.
   */
  public com.nuance.rpc.nlu.v1.EnumInterpretationResultType getInterpretationResultType() {
    @SuppressWarnings("deprecation")
    com.nuance.rpc.nlu.v1.EnumInterpretationResultType result = com.nuance.rpc.nlu.v1.EnumInterpretationResultType.valueOf(interpretationResultType_);
    return result == null ? com.nuance.rpc.nlu.v1.EnumInterpretationResultType.UNRECOGNIZED : result;
  }

  public static final int INTERPRETATION_INPUT_LOGGING_MODE_FIELD_NUMBER = 2;
  private int interpretationInputLoggingMode_;
  /**
   * <pre>
   * Format for input in the log. Default is PLAINTEXT.
   * </pre>
   *
   * <code>.nuance.nlu.v1.EnumInterpretationInputLoggingMode interpretation_input_logging_mode = 2;</code>
   * @return The enum numeric value on the wire for interpretationInputLoggingMode.
   */
  public int getInterpretationInputLoggingModeValue() {
    return interpretationInputLoggingMode_;
  }
  /**
   * <pre>
   * Format for input in the log. Default is PLAINTEXT.
   * </pre>
   *
   * <code>.nuance.nlu.v1.EnumInterpretationInputLoggingMode interpretation_input_logging_mode = 2;</code>
   * @return The interpretationInputLoggingMode.
   */
  public com.nuance.rpc.nlu.v1.EnumInterpretationInputLoggingMode getInterpretationInputLoggingMode() {
    @SuppressWarnings("deprecation")
    com.nuance.rpc.nlu.v1.EnumInterpretationInputLoggingMode result = com.nuance.rpc.nlu.v1.EnumInterpretationInputLoggingMode.valueOf(interpretationInputLoggingMode_);
    return result == null ? com.nuance.rpc.nlu.v1.EnumInterpretationInputLoggingMode.UNRECOGNIZED : result;
  }

  public static final int POST_PROCESSING_SCRIPT_PARAMETERS_FIELD_NUMBER = 3;
  private static final class PostProcessingScriptParametersDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.String, java.lang.String> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.String, java.lang.String>newDefaultInstance(
                com.nuance.rpc.nlu.v1.RuntimeProto.internal_static_nuance_nlu_v1_InterpretationParameters_PostProcessingScriptParametersEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.STRING,
                "");
  }
  private com.google.protobuf.MapField<
      java.lang.String, java.lang.String> postProcessingScriptParameters_;
  private com.google.protobuf.MapField<java.lang.String, java.lang.String>
  internalGetPostProcessingScriptParameters() {
    if (postProcessingScriptParameters_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          PostProcessingScriptParametersDefaultEntryHolder.defaultEntry);
    }
    return postProcessingScriptParameters_;
  }

  public int getPostProcessingScriptParametersCount() {
    return internalGetPostProcessingScriptParameters().getMap().size();
  }
  /**
   * <pre>
   * Parameters to pass to custom post-processing ECMA scripts in the model.
   * </pre>
   *
   * <code>map&lt;string, string&gt; post_processing_script_parameters = 3;</code>
   */

  public boolean containsPostProcessingScriptParameters(
      java.lang.String key) {
    if (key == null) { throw new java.lang.NullPointerException(); }
    return internalGetPostProcessingScriptParameters().getMap().containsKey(key);
  }
  /**
   * Use {@link #getPostProcessingScriptParametersMap()} instead.
   */
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, java.lang.String> getPostProcessingScriptParameters() {
    return getPostProcessingScriptParametersMap();
  }
  /**
   * <pre>
   * Parameters to pass to custom post-processing ECMA scripts in the model.
   * </pre>
   *
   * <code>map&lt;string, string&gt; post_processing_script_parameters = 3;</code>
   */

  public java.util.Map<java.lang.String, java.lang.String> getPostProcessingScriptParametersMap() {
    return internalGetPostProcessingScriptParameters().getMap();
  }
  /**
   * <pre>
   * Parameters to pass to custom post-processing ECMA scripts in the model.
   * </pre>
   *
   * <code>map&lt;string, string&gt; post_processing_script_parameters = 3;</code>
   */

  public java.lang.String getPostProcessingScriptParametersOrDefault(
      java.lang.String key,
      java.lang.String defaultValue) {
    if (key == null) { throw new java.lang.NullPointerException(); }
    java.util.Map<java.lang.String, java.lang.String> map =
        internalGetPostProcessingScriptParameters().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <pre>
   * Parameters to pass to custom post-processing ECMA scripts in the model.
   * </pre>
   *
   * <code>map&lt;string, string&gt; post_processing_script_parameters = 3;</code>
   */

  public java.lang.String getPostProcessingScriptParametersOrThrow(
      java.lang.String key) {
    if (key == null) { throw new java.lang.NullPointerException(); }
    java.util.Map<java.lang.String, java.lang.String> map =
        internalGetPostProcessingScriptParameters().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  public static final int MAX_INTERPRETATIONS_FIELD_NUMBER = 12;
  private int maxInterpretations_;
  /**
   * <pre>
   * Maximum interpretations for the result. Default is 0 for the NLU server's configured setting.
   * </pre>
   *
   * <code>uint32 max_interpretations = 12;</code>
   * @return The maxInterpretations.
   */
  public int getMaxInterpretations() {
    return maxInterpretations_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (interpretationResultType_ != com.nuance.rpc.nlu.v1.EnumInterpretationResultType.UNDEFINED.getNumber()) {
      output.writeEnum(1, interpretationResultType_);
    }
    if (interpretationInputLoggingMode_ != com.nuance.rpc.nlu.v1.EnumInterpretationInputLoggingMode.PLAINTEXT.getNumber()) {
      output.writeEnum(2, interpretationInputLoggingMode_);
    }
    com.google.protobuf.GeneratedMessageV3
      .serializeStringMapTo(
        output,
        internalGetPostProcessingScriptParameters(),
        PostProcessingScriptParametersDefaultEntryHolder.defaultEntry,
        3);
    if (maxInterpretations_ != 0) {
      output.writeUInt32(12, maxInterpretations_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (interpretationResultType_ != com.nuance.rpc.nlu.v1.EnumInterpretationResultType.UNDEFINED.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(1, interpretationResultType_);
    }
    if (interpretationInputLoggingMode_ != com.nuance.rpc.nlu.v1.EnumInterpretationInputLoggingMode.PLAINTEXT.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(2, interpretationInputLoggingMode_);
    }
    for (java.util.Map.Entry<java.lang.String, java.lang.String> entry
         : internalGetPostProcessingScriptParameters().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
      postProcessingScriptParameters__ = PostProcessingScriptParametersDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, postProcessingScriptParameters__);
    }
    if (maxInterpretations_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(12, maxInterpretations_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.nuance.rpc.nlu.v1.InterpretationParameters)) {
      return super.equals(obj);
    }
    com.nuance.rpc.nlu.v1.InterpretationParameters other = (com.nuance.rpc.nlu.v1.InterpretationParameters) obj;

    if (interpretationResultType_ != other.interpretationResultType_) return false;
    if (interpretationInputLoggingMode_ != other.interpretationInputLoggingMode_) return false;
    if (!internalGetPostProcessingScriptParameters().equals(
        other.internalGetPostProcessingScriptParameters())) return false;
    if (getMaxInterpretations()
        != other.getMaxInterpretations()) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + INTERPRETATION_RESULT_TYPE_FIELD_NUMBER;
    hash = (53 * hash) + interpretationResultType_;
    hash = (37 * hash) + INTERPRETATION_INPUT_LOGGING_MODE_FIELD_NUMBER;
    hash = (53 * hash) + interpretationInputLoggingMode_;
    if (!internalGetPostProcessingScriptParameters().getMap().isEmpty()) {
      hash = (37 * hash) + POST_PROCESSING_SCRIPT_PARAMETERS_FIELD_NUMBER;
      hash = (53 * hash) + internalGetPostProcessingScriptParameters().hashCode();
    }
    hash = (37 * hash) + MAX_INTERPRETATIONS_FIELD_NUMBER;
    hash = (53 * hash) + getMaxInterpretations();
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.nuance.rpc.nlu.v1.InterpretationParameters parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.nuance.rpc.nlu.v1.InterpretationParameters parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.nuance.rpc.nlu.v1.InterpretationParameters parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.nuance.rpc.nlu.v1.InterpretationParameters parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.nuance.rpc.nlu.v1.InterpretationParameters parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.nuance.rpc.nlu.v1.InterpretationParameters parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.nuance.rpc.nlu.v1.InterpretationParameters parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.nuance.rpc.nlu.v1.InterpretationParameters parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.nuance.rpc.nlu.v1.InterpretationParameters parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.nuance.rpc.nlu.v1.InterpretationParameters parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.nuance.rpc.nlu.v1.InterpretationParameters parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.nuance.rpc.nlu.v1.InterpretationParameters parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.nuance.rpc.nlu.v1.InterpretationParameters prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   **
   * Optional parameters controlling the interpretation. Included in
   * [InterpretRequest](#interpretrequest).
   * </pre>
   *
   * Protobuf type {@code nuance.nlu.v1.InterpretationParameters}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:nuance.nlu.v1.InterpretationParameters)
      com.nuance.rpc.nlu.v1.InterpretationParametersOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.nuance.rpc.nlu.v1.RuntimeProto.internal_static_nuance_nlu_v1_InterpretationParameters_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 3:
          return internalGetPostProcessingScriptParameters();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMutableMapField(
        int number) {
      switch (number) {
        case 3:
          return internalGetMutablePostProcessingScriptParameters();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.nuance.rpc.nlu.v1.RuntimeProto.internal_static_nuance_nlu_v1_InterpretationParameters_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.nuance.rpc.nlu.v1.InterpretationParameters.class, com.nuance.rpc.nlu.v1.InterpretationParameters.Builder.class);
    }

    // Construct using com.nuance.rpc.nlu.v1.InterpretationParameters.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      interpretationResultType_ = 0;

      interpretationInputLoggingMode_ = 0;

      internalGetMutablePostProcessingScriptParameters().clear();
      maxInterpretations_ = 0;

      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.nuance.rpc.nlu.v1.RuntimeProto.internal_static_nuance_nlu_v1_InterpretationParameters_descriptor;
    }

    @java.lang.Override
    public com.nuance.rpc.nlu.v1.InterpretationParameters getDefaultInstanceForType() {
      return com.nuance.rpc.nlu.v1.InterpretationParameters.getDefaultInstance();
    }

    @java.lang.Override
    public com.nuance.rpc.nlu.v1.InterpretationParameters build() {
      com.nuance.rpc.nlu.v1.InterpretationParameters result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.nuance.rpc.nlu.v1.InterpretationParameters buildPartial() {
      com.nuance.rpc.nlu.v1.InterpretationParameters result = new com.nuance.rpc.nlu.v1.InterpretationParameters(this);
      int from_bitField0_ = bitField0_;
      result.interpretationResultType_ = interpretationResultType_;
      result.interpretationInputLoggingMode_ = interpretationInputLoggingMode_;
      result.postProcessingScriptParameters_ = internalGetPostProcessingScriptParameters();
      result.postProcessingScriptParameters_.makeImmutable();
      result.maxInterpretations_ = maxInterpretations_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.nuance.rpc.nlu.v1.InterpretationParameters) {
        return mergeFrom((com.nuance.rpc.nlu.v1.InterpretationParameters)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.nuance.rpc.nlu.v1.InterpretationParameters other) {
      if (other == com.nuance.rpc.nlu.v1.InterpretationParameters.getDefaultInstance()) return this;
      if (other.interpretationResultType_ != 0) {
        setInterpretationResultTypeValue(other.getInterpretationResultTypeValue());
      }
      if (other.interpretationInputLoggingMode_ != 0) {
        setInterpretationInputLoggingModeValue(other.getInterpretationInputLoggingModeValue());
      }
      internalGetMutablePostProcessingScriptParameters().mergeFrom(
          other.internalGetPostProcessingScriptParameters());
      if (other.getMaxInterpretations() != 0) {
        setMaxInterpretations(other.getMaxInterpretations());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.nuance.rpc.nlu.v1.InterpretationParameters parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.nuance.rpc.nlu.v1.InterpretationParameters) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private int interpretationResultType_ = 0;
    /**
     * <pre>
     * Format of interpretation result. Default is SINGLE_INTENT.
     * </pre>
     *
     * <code>.nuance.nlu.v1.EnumInterpretationResultType interpretation_result_type = 1;</code>
     * @return The enum numeric value on the wire for interpretationResultType.
     */
    public int getInterpretationResultTypeValue() {
      return interpretationResultType_;
    }
    /**
     * <pre>
     * Format of interpretation result. Default is SINGLE_INTENT.
     * </pre>
     *
     * <code>.nuance.nlu.v1.EnumInterpretationResultType interpretation_result_type = 1;</code>
     * @param value The enum numeric value on the wire for interpretationResultType to set.
     * @return This builder for chaining.
     */
    public Builder setInterpretationResultTypeValue(int value) {
      interpretationResultType_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Format of interpretation result. Default is SINGLE_INTENT.
     * </pre>
     *
     * <code>.nuance.nlu.v1.EnumInterpretationResultType interpretation_result_type = 1;</code>
     * @return The interpretationResultType.
     */
    public com.nuance.rpc.nlu.v1.EnumInterpretationResultType getInterpretationResultType() {
      @SuppressWarnings("deprecation")
      com.nuance.rpc.nlu.v1.EnumInterpretationResultType result = com.nuance.rpc.nlu.v1.EnumInterpretationResultType.valueOf(interpretationResultType_);
      return result == null ? com.nuance.rpc.nlu.v1.EnumInterpretationResultType.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * Format of interpretation result. Default is SINGLE_INTENT.
     * </pre>
     *
     * <code>.nuance.nlu.v1.EnumInterpretationResultType interpretation_result_type = 1;</code>
     * @param value The interpretationResultType to set.
     * @return This builder for chaining.
     */
    public Builder setInterpretationResultType(com.nuance.rpc.nlu.v1.EnumInterpretationResultType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      interpretationResultType_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Format of interpretation result. Default is SINGLE_INTENT.
     * </pre>
     *
     * <code>.nuance.nlu.v1.EnumInterpretationResultType interpretation_result_type = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearInterpretationResultType() {
      
      interpretationResultType_ = 0;
      onChanged();
      return this;
    }

    private int interpretationInputLoggingMode_ = 0;
    /**
     * <pre>
     * Format for input in the log. Default is PLAINTEXT.
     * </pre>
     *
     * <code>.nuance.nlu.v1.EnumInterpretationInputLoggingMode interpretation_input_logging_mode = 2;</code>
     * @return The enum numeric value on the wire for interpretationInputLoggingMode.
     */
    public int getInterpretationInputLoggingModeValue() {
      return interpretationInputLoggingMode_;
    }
    /**
     * <pre>
     * Format for input in the log. Default is PLAINTEXT.
     * </pre>
     *
     * <code>.nuance.nlu.v1.EnumInterpretationInputLoggingMode interpretation_input_logging_mode = 2;</code>
     * @param value The enum numeric value on the wire for interpretationInputLoggingMode to set.
     * @return This builder for chaining.
     */
    public Builder setInterpretationInputLoggingModeValue(int value) {
      interpretationInputLoggingMode_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Format for input in the log. Default is PLAINTEXT.
     * </pre>
     *
     * <code>.nuance.nlu.v1.EnumInterpretationInputLoggingMode interpretation_input_logging_mode = 2;</code>
     * @return The interpretationInputLoggingMode.
     */
    public com.nuance.rpc.nlu.v1.EnumInterpretationInputLoggingMode getInterpretationInputLoggingMode() {
      @SuppressWarnings("deprecation")
      com.nuance.rpc.nlu.v1.EnumInterpretationInputLoggingMode result = com.nuance.rpc.nlu.v1.EnumInterpretationInputLoggingMode.valueOf(interpretationInputLoggingMode_);
      return result == null ? com.nuance.rpc.nlu.v1.EnumInterpretationInputLoggingMode.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * Format for input in the log. Default is PLAINTEXT.
     * </pre>
     *
     * <code>.nuance.nlu.v1.EnumInterpretationInputLoggingMode interpretation_input_logging_mode = 2;</code>
     * @param value The interpretationInputLoggingMode to set.
     * @return This builder for chaining.
     */
    public Builder setInterpretationInputLoggingMode(com.nuance.rpc.nlu.v1.EnumInterpretationInputLoggingMode value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      interpretationInputLoggingMode_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Format for input in the log. Default is PLAINTEXT.
     * </pre>
     *
     * <code>.nuance.nlu.v1.EnumInterpretationInputLoggingMode interpretation_input_logging_mode = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearInterpretationInputLoggingMode() {
      
      interpretationInputLoggingMode_ = 0;
      onChanged();
      return this;
    }

    private com.google.protobuf.MapField<
        java.lang.String, java.lang.String> postProcessingScriptParameters_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
    internalGetPostProcessingScriptParameters() {
      if (postProcessingScriptParameters_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            PostProcessingScriptParametersDefaultEntryHolder.defaultEntry);
      }
      return postProcessingScriptParameters_;
    }
    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
    internalGetMutablePostProcessingScriptParameters() {
      onChanged();;
      if (postProcessingScriptParameters_ == null) {
        postProcessingScriptParameters_ = com.google.protobuf.MapField.newMapField(
            PostProcessingScriptParametersDefaultEntryHolder.defaultEntry);
      }
      if (!postProcessingScriptParameters_.isMutable()) {
        postProcessingScriptParameters_ = postProcessingScriptParameters_.copy();
      }
      return postProcessingScriptParameters_;
    }

    public int getPostProcessingScriptParametersCount() {
      return internalGetPostProcessingScriptParameters().getMap().size();
    }
    /**
     * <pre>
     * Parameters to pass to custom post-processing ECMA scripts in the model.
     * </pre>
     *
     * <code>map&lt;string, string&gt; post_processing_script_parameters = 3;</code>
     */

    public boolean containsPostProcessingScriptParameters(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetPostProcessingScriptParameters().getMap().containsKey(key);
    }
    /**
     * Use {@link #getPostProcessingScriptParametersMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getPostProcessingScriptParameters() {
      return getPostProcessingScriptParametersMap();
    }
    /**
     * <pre>
     * Parameters to pass to custom post-processing ECMA scripts in the model.
     * </pre>
     *
     * <code>map&lt;string, string&gt; post_processing_script_parameters = 3;</code>
     */

    public java.util.Map<java.lang.String, java.lang.String> getPostProcessingScriptParametersMap() {
      return internalGetPostProcessingScriptParameters().getMap();
    }
    /**
     * <pre>
     * Parameters to pass to custom post-processing ECMA scripts in the model.
     * </pre>
     *
     * <code>map&lt;string, string&gt; post_processing_script_parameters = 3;</code>
     */

    public java.lang.String getPostProcessingScriptParametersOrDefault(
        java.lang.String key,
        java.lang.String defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetPostProcessingScriptParameters().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * Parameters to pass to custom post-processing ECMA scripts in the model.
     * </pre>
     *
     * <code>map&lt;string, string&gt; post_processing_script_parameters = 3;</code>
     */

    public java.lang.String getPostProcessingScriptParametersOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetPostProcessingScriptParameters().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public Builder clearPostProcessingScriptParameters() {
      internalGetMutablePostProcessingScriptParameters().getMutableMap()
          .clear();
      return this;
    }
    /**
     * <pre>
     * Parameters to pass to custom post-processing ECMA scripts in the model.
     * </pre>
     *
     * <code>map&lt;string, string&gt; post_processing_script_parameters = 3;</code>
     */

    public Builder removePostProcessingScriptParameters(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      internalGetMutablePostProcessingScriptParameters().getMutableMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String>
    getMutablePostProcessingScriptParameters() {
      return internalGetMutablePostProcessingScriptParameters().getMutableMap();
    }
    /**
     * <pre>
     * Parameters to pass to custom post-processing ECMA scripts in the model.
     * </pre>
     *
     * <code>map&lt;string, string&gt; post_processing_script_parameters = 3;</code>
     */
    public Builder putPostProcessingScriptParameters(
        java.lang.String key,
        java.lang.String value) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      if (value == null) { throw new java.lang.NullPointerException(); }
      internalGetMutablePostProcessingScriptParameters().getMutableMap()
          .put(key, value);
      return this;
    }
    /**
     * <pre>
     * Parameters to pass to custom post-processing ECMA scripts in the model.
     * </pre>
     *
     * <code>map&lt;string, string&gt; post_processing_script_parameters = 3;</code>
     */

    public Builder putAllPostProcessingScriptParameters(
        java.util.Map<java.lang.String, java.lang.String> values) {
      internalGetMutablePostProcessingScriptParameters().getMutableMap()
          .putAll(values);
      return this;
    }

    private int maxInterpretations_ ;
    /**
     * <pre>
     * Maximum interpretations for the result. Default is 0 for the NLU server's configured setting.
     * </pre>
     *
     * <code>uint32 max_interpretations = 12;</code>
     * @return The maxInterpretations.
     */
    public int getMaxInterpretations() {
      return maxInterpretations_;
    }
    /**
     * <pre>
     * Maximum interpretations for the result. Default is 0 for the NLU server's configured setting.
     * </pre>
     *
     * <code>uint32 max_interpretations = 12;</code>
     * @param value The maxInterpretations to set.
     * @return This builder for chaining.
     */
    public Builder setMaxInterpretations(int value) {
      
      maxInterpretations_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Maximum interpretations for the result. Default is 0 for the NLU server's configured setting.
     * </pre>
     *
     * <code>uint32 max_interpretations = 12;</code>
     * @return This builder for chaining.
     */
    public Builder clearMaxInterpretations() {
      
      maxInterpretations_ = 0;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:nuance.nlu.v1.InterpretationParameters)
  }

  // @@protoc_insertion_point(class_scope:nuance.nlu.v1.InterpretationParameters)
  private static final com.nuance.rpc.nlu.v1.InterpretationParameters DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.nuance.rpc.nlu.v1.InterpretationParameters();
  }

  public static com.nuance.rpc.nlu.v1.InterpretationParameters getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<InterpretationParameters>
      PARSER = new com.google.protobuf.AbstractParser<InterpretationParameters>() {
    @java.lang.Override
    public InterpretationParameters parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new InterpretationParameters(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<InterpretationParameters> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<InterpretationParameters> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.nuance.rpc.nlu.v1.InterpretationParameters getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

